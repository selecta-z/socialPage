'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var styled = _interopDefault(require('styled-components'));

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var reactSmartScrollerId = 'react-smart-scroller';

var PaddingCount;

(function (PaddingCount) {
  PaddingCount[PaddingCount["One"] = 1] = "One";
  PaddingCount[PaddingCount["Two"] = 2] = "Two";
  PaddingCount[PaddingCount["Three"] = 3] = "Three";
  PaddingCount[PaddingCount["Four"] = 4] = "Four";
})(PaddingCount || (PaddingCount = {}));

var all = function all() {
  for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
    params[_key] = arguments[_key];
  }

  return params.every(Boolean);
};

var noop = function noop() {};
var extractNumberFromStyle = function extractNumberFromStyle(value) {
  return value ? Number(value.toString().replace('px', '')) : undefined;
};
var getPaddingValues = function getPaddingValues(padding, paddingLeft, paddingRight, paddingTop, paddingBottom) {
  var zeroPadding = {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };

  if (!padding && !paddingLeft && !paddingRight && !paddingTop && !paddingBottom) {
    return zeroPadding;
  }

  if (!padding) {
    return _extends({}, zeroPadding, {
      right: extractNumberFromStyle(paddingRight),
      left: extractNumberFromStyle(paddingLeft),
      top: extractNumberFromStyle(paddingTop),
      bottom: extractNumberFromStyle(paddingBottom)
    });
  }

  var splittedPadding = padding.toString().split(' ');
  var paddingValuesCount = splittedPadding.length;
  var paddingValues = splittedPadding.map(extractNumberFromStyle);

  switch (paddingValuesCount) {
    case PaddingCount.One:
      {
        var _padding = paddingValues[0];
        return {
          top: _padding,
          right: _padding,
          bottom: _padding,
          left: _padding
        };
      }

    case PaddingCount.Two:
      {
        var paddingVertical = paddingValues[0],
            paddingHorizontal = paddingValues[1];
        return {
          top: paddingVertical,
          right: paddingHorizontal,
          bottom: paddingVertical,
          left: paddingHorizontal
        };
      }

    case PaddingCount.Three:
      {
        var _paddingTop = paddingValues[0],
            _paddingHorizontal = paddingValues[1],
            _paddingBottom = paddingValues[2];
        return {
          top: _paddingTop,
          right: _paddingHorizontal,
          bottom: _paddingBottom,
          left: _paddingHorizontal
        };
      }

    case PaddingCount.Four:
    default:
      {
        var top = paddingValues[0],
            right = paddingValues[1],
            bottom = paddingValues[2],
            left = paddingValues[3];
        return {
          top: top,
          right: right,
          bottom: bottom,
          left: left
        };
      }
  }
};

var isServer = function isServer() {
  return typeof window === 'undefined';
};

var checkAgent = function checkAgent(agentName) {
  return !isServer() ? navigator.userAgent.includes(agentName) : false;
};
var isIpad = function isIpad() {
  return checkAgent('iPad');
};
var isIOS = function isIOS() {
  return checkAgent('iPhone') || isIpad();
};
var isAndroid = function isAndroid() {
  return checkAgent('Android');
};
var isMacOs = function isMacOs() {
  return checkAgent('Mac');
};
var isMobile = function isMobile() {
  return isAndroid() || isIOS();
};

var colors = {
  primary: '#2ecc71',
  secondary: '#27ae60',
  typography: '#2c3e50',
  red: '#e74c3c',
  white: '#ffffff',
  black: '#000000',
  peterRiver: '#3498db',
  sunflower: '#f1c40f',
  gray: {
    lightGray: '#ecf0f1',
    mediumGray: '#bdc3c7',
    darkGray: '#9ca2a7'
  }
};

function _templateObject5() {
  var data = _taggedTemplateLiteralLoose(["\n    position: absolute;\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteralLoose(["\n    position: relative;\n    background-color: ", ";\n    cursor: pointer;\n    width: 10px;\n    height: 100%;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n    position: absolute;\n    cursor: pointer;\n    right: 0;\n    height: 100%;\n    background-color: ", ";\n    top: 0;\n    width: 10px;\n    display: flex;\n    justify-content: center;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n    box-sizing: border-box;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    margin-right: -20px;\n    -webkit-overflow-scrolling: touch;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var ReactSmartScrollerVertical = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ReactSmartScrollerVertical, _React$Component);

  function ReactSmartScrollerVertical(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      scrollContainerHeight: 0,
      deltaYOrigin: 0,
      deltaY: 0,
      thumbWidth: 0,
      trackWidth: 0,
      scrollHeight: 0,
      scrollTop: 0,
      padding: _this.trackPadding,
      ratio: 1
    };
    _this.overflowContainerRef = React.createRef();
    _this.thumbRef = React.createRef();
    _this.trackRef = React.createRef();
    _this.measureContainers = _this.measureContainers.bind(_assertThisInitialized(_this));
    _this.onMouseDown = _this.onMouseDown.bind(_assertThisInitialized(_this));
    _this.onMouseDrag = _this.onMouseDrag.bind(_assertThisInitialized(_this));
    _this.onOverflowContentScroll = _this.onOverflowContentScroll.bind(_assertThisInitialized(_this));
    _this.deleteMouseMoveEvent = _this.deleteMouseMoveEvent.bind(_assertThisInitialized(_this));
    _this.onScrollbarClick = _this.onScrollbarClick.bind(_assertThisInitialized(_this));
    _this.onOverflowContentMouseDown = _this.onOverflowContentMouseDown.bind(_assertThisInitialized(_this));
    _this.onOverflowContentDrag = _this.onOverflowContentDrag.bind(_assertThisInitialized(_this));
    _this.deleteOverflowMouseMoveEvent = _this.deleteOverflowMouseMoveEvent.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = ReactSmartScrollerVertical.prototype;

  _proto.componentDidMount = function componentDidMount() {
    window.addEventListener('resize', this.measureContainers);
    window.addEventListener('mouseup', this.deleteMouseMoveEvent);
    window.addEventListener('transitionend', this.measureContainers);
    window.addEventListener('mouseup', this.deleteOverflowMouseMoveEvent);
    window.addEventListener('load', this.measureContainers);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('resize', this.measureContainers);
    window.removeEventListener('mouseup', this.deleteMouseMoveEvent);
    window.removeEventListener('transitionend', this.measureContainers);
    window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent);
    window.removeEventListener('load', this.measureContainers);
  };

  _proto.setStartPosition = function setStartPosition() {
    var startAt = this.props.startAt;
    var overflowRef = this.overflowContainerRef.current;
    var startElement = this.startElement;
    this.measureContainers();

    if (overflowRef && startElement) {
      var offset = startAt && startAt.center ? (overflowRef.clientHeight - startElement.clientHeight) / 2 : 0;
      overflowRef.scrollTop = startElement.offsetTop - offset;
    }
  };

  _proto.scrollContainerReducedHeight = function scrollContainerReducedHeight(scrollContainerHeight) {
    var padding = this.state.padding;
    return scrollContainerHeight - (padding.top + padding.bottom);
  };

  _proto.measureContainers = function measureContainers(event) {
    var _this2 = this;

    var overflownRef = this.overflowContainerRef.current;
    var thumbRef = this.thumbRef.current;
    var trackRef = this.trackRef.current;
    var areRefsCurrent = all(overflownRef, thumbRef, trackRef);

    if (areRefsCurrent) {
      var scrollContainerHeight = this.scrollContainerReducedHeight(overflownRef.clientHeight);
      var maximumOffset = scrollContainerHeight - thumbRef.offsetHeight;
      var ratio = maximumOffset / (overflownRef.scrollHeight - overflownRef.clientHeight);
      this.setState({
        scrollContainerHeight: scrollContainerHeight,
        thumbWidth: thumbRef.offsetWidth,
        trackWidth: trackRef.clientWidth,
        scrollHeight: overflownRef.scrollHeight,
        ratio: ratio
      }, function () {
        if (event && event.type === 'load') {
          _this2.setStartPosition();
        }
      });
    }

    if (areRefsCurrent && thumbRef.offsetTop + thumbRef.offsetHeight > overflownRef.clientHeight) {
      var scrollOffset = overflownRef.clientHeight - thumbRef.offsetHeight;
      overflownRef.scroll(0, overflownRef.scrollHeight);
      thumbRef.style.top = scrollOffset + "px";
    }
  };

  _proto.onMouseDown = function onMouseDown(event) {
    event.preventDefault();
    var thumbRef = this.thumbRef.current;
    var overflownRef = this.overflowContainerRef.current;

    if (thumbRef && overflownRef) {
      this.setState({
        deltaYOrigin: thumbRef.offsetTop,
        deltaY: event.clientY + this.state.padding.top
      });
    }

    window.addEventListener('mousemove', this.onMouseDrag);
  };

  _proto.onScrollbarClick = function onScrollbarClick(_ref) {
    var clientY = _ref.clientY;
    var padding = this.state.padding;
    var thumbRef = this.thumbRef.current;
    var overflowRef = this.overflowContainerRef.current;
    var shouldReturn = all(thumbRef, overflowRef, clientY >= (extractNumberFromStyle(thumbRef.style.top) || 0) + overflowRef.getBoundingClientRect().top + padding.top, clientY <= (extractNumberFromStyle(thumbRef.style.top) || 0) + overflowRef.getBoundingClientRect().top + thumbRef.offsetHeight + padding.top); // leave this function if thumb was clicked

    if (shouldReturn) {
      return null;
    }

    var maximumOffset = this.state.scrollContainerHeight - thumbRef.offsetHeight; // this is different ratio than in state

    var ratio = (overflowRef.scrollHeight - overflowRef.clientHeight) / maximumOffset;
    var deltaY = overflowRef.getBoundingClientRect().top + thumbRef.offsetHeight / 2 + padding.top;
    return overflowRef.scroll({
      top: ratio * (clientY - deltaY),
      left: 0,
      behavior: 'smooth'
    });
  };

  _proto.deleteMouseMoveEvent = function deleteMouseMoveEvent() {
    window.removeEventListener('mousemove', this.onMouseDrag);
  };

  _proto.deleteOverflowMouseMoveEvent = function deleteOverflowMouseMoveEvent() {
    window.removeEventListener('mousemove', this.onOverflowContentDrag);
  };

  _proto.onMouseDrag = function onMouseDrag(event) {
    var zero = 0;
    var _this$state = this.state,
        deltaY = _this$state.deltaY,
        deltaYOrigin = _this$state.deltaYOrigin,
        scrollContainerHeight = _this$state.scrollContainerHeight,
        padding = _this$state.padding;
    var overflowRef = this.overflowContainerRef.current;
    var thumbRef = this.thumbRef.current;
    var maximumOffset = scrollContainerHeight - thumbRef.offsetHeight;
    var offset = event.clientY - deltaY + deltaYOrigin + padding.top;
    var isBetweenClientHeight = offset >= zero && offset <= maximumOffset;
    var areRefsCurrent = all(Boolean(this.overflowContainerRef.current), Boolean(this.thumbRef.current));

    if (areRefsCurrent && !isBetweenClientHeight) {
      var criticalDimension = offset < zero ? zero : maximumOffset;
      var criticalScrollerDimensions = offset > zero ? overflowRef.scrollHeight - overflowRef.offsetHeight : zero;
      thumbRef.style.top = criticalDimension + "px";
      overflowRef.scroll(zero, criticalScrollerDimensions);
    }

    if (areRefsCurrent && isBetweenClientHeight) {
      // this is different ratio than in state
      var ratio = (overflowRef.scrollHeight - overflowRef.offsetHeight) / maximumOffset;
      overflowRef.scroll(zero, ratio * offset);
      thumbRef.style.top = offset + "px";
    }
  };

  _proto.onOverflowContentScroll = function onOverflowContentScroll() {
    var ratio = this.state.ratio;
    var thumbRef = this.thumbRef.current;
    var overflowRef = this.overflowContainerRef.current;

    if (overflowRef && thumbRef) {
      thumbRef.style.top = overflowRef.scrollTop * ratio + "px";
    }
  };

  _proto.onOverflowContentMouseDown = function onOverflowContentMouseDown(event) {
    event.preventDefault();
    var overflowRef = this.overflowContainerRef.current;

    if (overflowRef) {
      this.setState({
        deltaY: event.clientY,
        scrollTop: overflowRef.scrollTop
      });
    }

    window.addEventListener('mousemove', this.onOverflowContentDrag);
  };

  _proto.onOverflowContentDrag = function onOverflowContentDrag(event) {
    var _this$state2 = this.state,
        deltaY = _this$state2.deltaY,
        scrollTop = _this$state2.scrollTop;
    var overflowRef = this.overflowContainerRef.current;

    if (overflowRef && event.clientY !== 0) {
      overflowRef.scroll(0, scrollTop - (event.clientY - deltaY));
    }
  };

  _proto.renderThumb = function renderThumb() {
    var _this$state3 = this.state,
        scrollContainerHeight = _this$state3.scrollContainerHeight,
        scrollHeight = _this$state3.scrollHeight;
    var percentageWidth = Number((scrollContainerHeight * 100 / scrollHeight).toFixed(0));
    var height = percentageWidth * scrollContainerHeight / 100 + "px";

    if (this.props.thumb) {
      return React.cloneElement(this.props.thumb, {
        ref: this.thumbRef,
        onMouseDown: this.onMouseDown,
        style: _extends({
          top: 0,
          position: 'relative',
          cursor: 'pointer'
        }, this.props.thumb.props.style)
      });
    }

    return React.createElement(RectangleThumb, {
      ref: this.thumbRef,
      onMouseDown: this.onMouseDown,
      style: {
        height: height
      }
    });
  };

  _proto.renderScrollbar = function renderScrollbar() {
    var display = !isMobile() && this.shouldRenderScrollbar;
    return React.createElement(Track, {
      ref: this.trackRef,
      onClick: this.onScrollbarClick,
      style: _extends({
        color: colors.gray.mediumGray,
        right: this.rightOffset,
        display: display ? 'flex' : 'none'
      }, this.props.trackProps)
    }, React.createElement(EmptyAbsolute, null, this.renderThumb()));
  };

  _proto.renderChildren = function renderChildren() {
    var _this3 = this;

    var cols = this.props.numCols;
    var spacing = this.props.spacing;
    var padding = spacing / 2;
    var children = this.props.children;
    return React.Children.map(children, function (child, index) {
      var paddingBottom = index !== React.Children.count(children) - 1 ? "paddingBottom: " + padding + "px" : undefined;
      var paddingTop = index !== 0 ? "paddingTop: " + padding + "px" : undefined;
      var height = cols ? "calc(100% / " + cols + ")" : 'auto';
      var extendedChild = React.cloneElement(children[index], {
        style: _extends({
          display: 'flex'
        }, children[index].props.style)
      });
      return React.createElement(ChildrenWrapper, {
        id: reactSmartScrollerId + "-" + index,
        style: {
          padding: padding + "px 0",
          height: height,
          paddingTop: paddingTop,
          paddingBottom: paddingBottom,
          marginRight: _this3.contentMargin
        }
      }, extendedChild);
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        draggable = _this$props.draggable,
        style = _this$props.style;
    var cursor = draggable ? 'pointer' : 'unset';
    return React.createElement("div", {
      style: style
    }, React.createElement(Content, {
      style: {
        cursor: cursor
      },
      ref: this.overflowContainerRef,
      onScroll: this.onOverflowContentScroll,
      onMouseDown: draggable ? this.onOverflowContentMouseDown : noop
    }, this.renderChildren()), this.renderScrollbar());
  };

  _createClass(ReactSmartScrollerVertical, [{
    key: "shouldRenderScrollbar",
    get: function get() {
      var overflownRef = this.overflowContainerRef.current;
      var cols = this.props.numCols;

      if (!cols && overflownRef) {
        return overflownRef.clientHeight < overflownRef.scrollHeight;
      }

      return !(overflownRef && overflownRef.children.length <= cols);
    }
  }, {
    key: "trackPadding",
    get: function get() {
      var trackProps = this.props.trackProps;
      return trackProps ? getPaddingValues(trackProps.padding, trackProps.paddingLeft, trackProps.paddingRight, trackProps.paddingTop, trackProps.paddingBottom) : {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  }, {
    key: "contentMargin",
    get: function get() {
      var _this$state4 = this.state,
          thumbWidth = _this$state4.thumbWidth,
          trackWidth = _this$state4.trackWidth;
      var windowsScrollWidth = 20;
      var marginWidth = trackWidth > thumbWidth ? trackWidth : thumbWidth;
      var margin = isMacOs() ? marginWidth + windowsScrollWidth : marginWidth;
      return !isMobile() && this.shouldRenderScrollbar ? margin + 10 + "px" : '20px';
    }
  }, {
    key: "rightOffset",
    get: function get() {
      return this.state.thumbWidth > this.state.trackWidth ? (this.state.thumbWidth - this.state.trackWidth) / 2 : 0;
    }
  }, {
    key: "startElement",
    get: function get() {
      if (this.props.startAt) {
        return document.getElementById(reactSmartScrollerId + "-" + this.props.startAt.startIndex);
      }

      return undefined;
    }
  }]);

  return ReactSmartScrollerVertical;
}(React.Component);
var Content = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject());
var ChildrenWrapper = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject2());
var Track = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject3(), colors.gray.mediumGray);
var RectangleThumb = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject4(), colors.primary);
var EmptyAbsolute = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject5());

function _templateObject8() {
  var data = _taggedTemplateLiteralLoose(["\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    margin: 0 3px;\n    cursor: pointer;\n"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteralLoose(["\n    border: solid ", ";\n    border-width: 0 2px 2px 0;\n    display: inline-block;\n    padding: 6px;\n    transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    cursor: pointer;\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteralLoose(["\n    border: solid ", ";\n    border-width: 0 2px 2px 0;\n    display: inline-block;\n    padding: 6px;\n    transform: rotate(135deg);\n    -webkit-transform: rotate(135deg);\n    cursor: pointer;\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$1() {
  var data = _taggedTemplateLiteralLoose(["\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n"]);

  _templateObject5$1 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$1() {
  var data = _taggedTemplateLiteralLoose(["\n    position: relative;\n    left: 0;\n    background-color: ", ";\n    cursor: pointer;\n    width: 100px;\n    height: 10px;\n"]);

  _templateObject4$1 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  var data = _taggedTemplateLiteralLoose(["\n    position: absolute;\n    cursor: pointer;\n    left: 0;\n    width: 100%;\n    background-color: ", ";\n    bottom: 0;\n    height: 10px;\n    display: flex;\n    align-items: center;\n"]);

  _templateObject3$1 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = _taggedTemplateLiteralLoose(["\n    flex: 0 0 auto;\n    box-sizing: border-box;\n"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n    display: flex;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    margin-bottom: -20px;\n    -webkit-overflow-scrolling: touch;\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var ReactSmartScrollerHorizontal = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ReactSmartScrollerHorizontal, _React$Component);

  function ReactSmartScrollerHorizontal(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      scrollContainerWidth: 0,
      deltaXOrigin: 0,
      deltaX: 0,
      thumbHeight: 0,
      trackHeight: 0,
      scrollWidth: 0,
      scrollLeft: 0,
      padding: _this.trackPadding,
      ratio: 1,
      numberOfViews: 0,
      paginationIndex: 0
    };
    _this.overflowContainerRef = React.createRef();
    _this.thumbRef = React.createRef();
    _this.trackRef = React.createRef();
    _this.paginationRef = React.createRef();
    _this.onNext = _this.onNext.bind(_assertThisInitialized(_this));
    _this.onPrevious = _this.onPrevious.bind(_assertThisInitialized(_this));
    _this.onDotClick = _this.onDotClick.bind(_assertThisInitialized(_this));
    _this.measureContainers = _this.measureContainers.bind(_assertThisInitialized(_this));
    _this.onMouseDown = _this.onMouseDown.bind(_assertThisInitialized(_this));
    _this.onMouseDrag = _this.onMouseDrag.bind(_assertThisInitialized(_this));
    _this.onOverflowContentScroll = _this.onOverflowContentScroll.bind(_assertThisInitialized(_this));
    _this.deleteMouseMoveEvent = _this.deleteMouseMoveEvent.bind(_assertThisInitialized(_this));
    _this.onScrollbarClick = _this.onScrollbarClick.bind(_assertThisInitialized(_this));
    _this.onOverflowContentDrag = _this.onOverflowContentDrag.bind(_assertThisInitialized(_this));
    _this.onOverflowContentMouseDown = _this.onOverflowContentMouseDown.bind(_assertThisInitialized(_this));
    _this.deleteOverflowMouseMoveEvent = _this.deleteOverflowMouseMoveEvent.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = ReactSmartScrollerHorizontal.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.setState({
      numberOfViews: this.numberOfViews
    });
    window.addEventListener('resize', this.measureContainers);
    window.addEventListener('mouseup', this.deleteMouseMoveEvent);
    window.addEventListener('transitionend', this.measureContainers);
    window.addEventListener('mouseup', this.deleteOverflowMouseMoveEvent);
    window.addEventListener('load', this.measureContainers);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('resize', this.measureContainers);
    window.removeEventListener('mouseup', this.deleteMouseMoveEvent);
    window.removeEventListener('transitionend', this.measureContainers);
    window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent);
    window.removeEventListener('load', this.measureContainers);
  };

  _proto.scrollContainerReducedWidth = function scrollContainerReducedWidth(scrollContainerWidth) {
    var padding = this.state.padding;
    return scrollContainerWidth - (padding.left + padding.right);
  };

  _proto.setStartPosition = function setStartPosition() {
    var startAt = this.props.startAt;
    var overflowRef = this.overflowContainerRef.current;
    var startElement = this.startElement;
    this.measureContainers();

    if (overflowRef && startElement) {
      var offset = startAt && startAt.center ? (overflowRef.clientWidth - startElement.clientWidth) / 2 : 0;
      overflowRef.scrollLeft = startElement.offsetLeft - offset;
    }
  };

  _proto.measureContainers = function measureContainers(event) {
    var _this2 = this;

    var overflownRef = this.overflowContainerRef.current;
    var thumbRef = this.thumbRef.current;
    var trackRef = this.trackRef.current;
    var areRefsCurrent = all(overflownRef, thumbRef, trackRef);

    if (areRefsCurrent) {
      var scrollContainerWidth = this.scrollContainerReducedWidth(overflownRef.clientWidth);
      var maximumOffset = scrollContainerWidth - thumbRef.offsetWidth;
      var ratio = maximumOffset / (overflownRef.scrollWidth - overflownRef.clientWidth);
      this.setState({
        scrollContainerWidth: scrollContainerWidth,
        thumbHeight: thumbRef.offsetHeight,
        trackHeight: trackRef.clientHeight,
        scrollWidth: overflownRef.scrollWidth,
        ratio: ratio
      }, function () {
        if (event && event.type === 'load') {
          _this2.setStartPosition();
        }
      });
    }

    if (areRefsCurrent && thumbRef.offsetLeft + thumbRef.clientWidth > overflownRef.clientWidth) {
      var scrollOffset = overflownRef.clientWidth - thumbRef.clientWidth;
      overflownRef.scroll(overflownRef.scrollWidth, 0);
      thumbRef.style.left = scrollOffset + "px";
    }
  };

  _proto.onMouseDown = function onMouseDown(event) {
    event.preventDefault();

    if (this.thumbRef.current) {
      this.setState({
        deltaXOrigin: this.thumbRef.current.offsetLeft,
        deltaX: event.clientX + this.state.padding.left
      });
    }

    window.addEventListener('mousemove', this.onMouseDrag);
  };

  _proto.onScrollbarClick = function onScrollbarClick(_ref) {
    var clientX = _ref.clientX;
    var thumbRef = this.thumbRef.current;
    var overflowRef = this.overflowContainerRef.current;
    var shouldReturn = all(thumbRef, overflowRef, clientX >= thumbRef.offsetLeft + overflowRef.getBoundingClientRect().left, clientX <= thumbRef.offsetLeft + overflowRef.getBoundingClientRect().left + thumbRef.offsetWidth); // leave this function if thumb was clicked

    if (shouldReturn) {
      return null;
    }

    var maximumOffset = this.state.scrollContainerWidth - thumbRef.offsetWidth; // this is different ratio than in state

    var ratio = (overflowRef.scrollWidth - overflowRef.clientWidth) / maximumOffset;
    var deltaX = overflowRef.getBoundingClientRect().left + thumbRef.offsetWidth / 2 + this.state.padding.left;
    return overflowRef.scroll({
      left: ratio * (clientX - deltaX),
      top: 0,
      behavior: 'smooth'
    });
  };

  _proto.deleteMouseMoveEvent = function deleteMouseMoveEvent() {
    window.removeEventListener('mousemove', this.onMouseDrag);
  };

  _proto.deleteOverflowMouseMoveEvent = function deleteOverflowMouseMoveEvent() {
    window.removeEventListener('mousemove', this.onOverflowContentDrag);
  };

  _proto.onMouseDrag = function onMouseDrag(event) {
    var zero = 0;
    var _this$state = this.state,
        deltaX = _this$state.deltaX,
        deltaXOrigin = _this$state.deltaXOrigin,
        scrollContainerWidth = _this$state.scrollContainerWidth;
    var overflowRef = this.overflowContainerRef.current;
    var thumbRef = this.thumbRef.current;
    var maximumOffset = scrollContainerWidth - thumbRef.offsetWidth;
    var offset = event.clientX - deltaX + deltaXOrigin;
    var isBetweenClientWidth = offset >= zero && offset <= maximumOffset;
    var areRefsCurrent = all(Boolean(this.overflowContainerRef.current), Boolean(this.thumbRef.current));

    if (areRefsCurrent && !isBetweenClientWidth) {
      var criticalDimension = offset < zero ? zero : maximumOffset;
      var criticalScrollerDimensions = offset > zero ? overflowRef.scrollWidth - overflowRef.clientWidth : zero;
      thumbRef.style.left = criticalDimension + "px";
      overflowRef.scroll(criticalScrollerDimensions, zero);
    }

    if (areRefsCurrent && isBetweenClientWidth) {
      // this is different ratio than in state
      var ratio = (overflowRef.scrollWidth - overflowRef.clientWidth) / maximumOffset;
      overflowRef.scroll(ratio * offset, zero);
      thumbRef.style.left = offset + "px";
    }
  };

  _proto.onOverflowContentScroll = function onOverflowContentScroll() {
    var _this$childrenWidth, _properChildrenOffset;

    var ratio = this.state.ratio;
    var thumbRef = this.thumbRef.current;
    var overflowRef = this.overflowContainerRef.current;

    if (overflowRef && thumbRef) {
      thumbRef.style.left = overflowRef.scrollLeft * ratio + "px";
    } // logic to pagination


    var leftScroll = (overflowRef === null || overflowRef === void 0 ? void 0 : overflowRef.scrollLeft) || 0;
    var properChildrenOffsets = (_this$childrenWidth = this.childrenWidth) === null || _this$childrenWidth === void 0 ? void 0 : _this$childrenWidth.reduce(function (acc, element, index) {
      var _acc;

      return acc.concat({
        index: index + 1,
        value: element.value + (((_acc = acc[index - 1]) === null || _acc === void 0 ? void 0 : _acc.value) || 0)
      });
    }, []);
    var searchedElement = properChildrenOffsets === null || properChildrenOffsets === void 0 ? void 0 : (_properChildrenOffset = properChildrenOffsets.reverse()) === null || _properChildrenOffset === void 0 ? void 0 : _properChildrenOffset.find(function (item) {
      return leftScroll >= item.value;
    });
    this.setState({
      paginationIndex: searchedElement ? searchedElement.index : 0
    });
  };

  _proto.onOverflowContentMouseDown = function onOverflowContentMouseDown(event) {
    event.preventDefault();
    var overflowRef = this.overflowContainerRef.current;

    if (overflowRef) {
      this.setState({
        deltaX: event.clientX,
        scrollLeft: overflowRef.scrollLeft
      });
    }

    window.addEventListener('mousemove', this.onOverflowContentDrag);
  };

  _proto.onOverflowContentDrag = function onOverflowContentDrag(event) {
    var _this$state2 = this.state,
        deltaX = _this$state2.deltaX,
        scrollLeft = _this$state2.scrollLeft;
    var overflowRef = this.overflowContainerRef.current;

    if (overflowRef && event.clientX !== 0) {
      overflowRef.scroll(scrollLeft - (event.clientX - deltaX), 0);
    }
  };

  _proto.renderChildren = function renderChildren() {
    var _this3 = this;

    var cols = this.props.numCols;
    var spacing = this.props.spacing;
    var padding = spacing / 2;
    var children = this.props.children;
    return React.Children.map(children, function (child, index) {
      var paddingRight = index !== React.Children.count(children) - 1 ? "paddingRight: " + padding + "px" : undefined;
      var paddingLeft = index !== 0 ? "paddingLeft: " + padding + "px" : undefined;
      var flexBasis = cols ? "calc(100% / " + cols + ")" : 'unset';
      return React.createElement(ChildrenWrapper$1, {
        id: reactSmartScrollerId + "-" + index,
        style: {
          padding: "0 " + padding + "px",
          flexBasis: flexBasis,
          paddingRight: paddingRight,
          paddingLeft: paddingLeft,
          marginBottom: _this3.contentMargin
        }
      }, child);
    });
  };

  _proto.renderThumb = function renderThumb() {
    var _this$state3 = this.state,
        scrollContainerWidth = _this$state3.scrollContainerWidth,
        scrollWidth = _this$state3.scrollWidth;
    var percentageWidth = Number((scrollContainerWidth * 100 / scrollWidth).toFixed(0));
    var width = percentageWidth * scrollContainerWidth / 100 + "px";

    if (this.props.thumb) {
      return React.cloneElement(this.props.thumb, {
        ref: this.thumbRef,
        onMouseDown: this.onMouseDown,
        style: _extends({
          left: 0,
          position: 'relative',
          cursor: 'pointer'
        }, this.props.thumb.props.style)
      });
    }

    return React.createElement(RectangleThumb$1, {
      ref: this.thumbRef,
      onMouseDown: this.onMouseDown,
      style: {
        width: width
      }
    });
  };

  _proto.renderScrollbar = function renderScrollbar() {
    var _this$props$paginatio, _this$paginationRef$c;

    var display = !isMobile() && this.shouldRenderScrollbar && !this.props.pagination;
    var customStyles = ((_this$props$paginatio = this.props.paginationConfig) === null || _this$props$paginatio === void 0 ? void 0 : _this$props$paginatio.withScroll) ? {
      bottom: ((_this$paginationRef$c = this.paginationRef.current) === null || _this$paginationRef$c === void 0 ? void 0 : _this$paginationRef$c.clientHeight) || 40
    } : {
      bottom: 0
    };
    return React.createElement(Track$1, {
      ref: this.trackRef,
      onClick: this.onScrollbarClick,
      style: _extends({
        color: colors.gray.mediumGray,
        bottom: this.bottomOffset,
        display: display ? 'flex' : 'none'
      }, this.props.trackProps, {}, customStyles)
    }, this.renderThumb());
  };

  _proto.onNext = function onNext() {
    var overflowRef = this.overflowContainerRef.current;
    var paginationIndex = this.state.paginationIndex;
    var paginationConfig = this.props.paginationConfig;

    if (overflowRef && paginationConfig && paginationConfig.withScroll && paginationIndex < this.numberOfViews - 1) {
      var _overflowRef$children;

      var index = paginationIndex + 1;
      var newScrollValue = ((_overflowRef$children = overflowRef.children.item(paginationIndex)) === null || _overflowRef$children === void 0 ? void 0 : _overflowRef$children.clientWidth) || 0;
      overflowRef.scroll({
        left: overflowRef.scrollLeft + newScrollValue,
        top: 0,
        behavior: 'smooth'
      });
      return this.setState({
        paginationIndex: index
      });
    }
  };

  _proto.onPrevious = function onPrevious() {
    var overflowRef = this.overflowContainerRef.current;
    var paginationIndex = this.state.paginationIndex;
    var paginationConfig = this.props.paginationConfig;

    if (overflowRef && paginationConfig && paginationConfig.withScroll && paginationIndex > 0) {
      var _overflowRef$children2;

      var index = paginationIndex - 1;
      var newScrollValue = ((_overflowRef$children2 = overflowRef.children.item(index)) === null || _overflowRef$children2 === void 0 ? void 0 : _overflowRef$children2.clientWidth) || 0;
      overflowRef.scroll({
        left: overflowRef.scrollLeft - newScrollValue,
        top: 0,
        behavior: 'smooth'
      });
      return this.setState({
        paginationIndex: index
      });
    }
  };

  _proto.onDotClick = function onDotClick(index) {
    var overflowRef = this.overflowContainerRef.current;
    var paginationConfig = this.props.paginationConfig;

    if (overflowRef && paginationConfig && paginationConfig.withScroll) {
      var _overflowRef$children3;

      var newScrollValue = (overflowRef === null || overflowRef === void 0 ? void 0 : (_overflowRef$children3 = overflowRef.children.item(index)) === null || _overflowRef$children3 === void 0 ? void 0 : _overflowRef$children3.offsetLeft) || 0;
      overflowRef.scroll({
        left: newScrollValue,
        top: 0,
        behavior: 'smooth'
      });
      return this.setState({
        paginationIndex: index
      });
    }
  };

  _proto.renderDots = function renderDots() {
    var _this4 = this;

    var paginationConfig = this.props.paginationConfig;
    return Array.from(Array(this.numberOfViews)).map(function (_, index) {
      var backgroundColor = _this4.state.paginationIndex === index ? (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.activeDotColor) || colors.primary : (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.unactiveDotsColor) || colors.gray.mediumGray;
      return React.createElement(Dot, {
        key: index,
        style: {
          backgroundColor: backgroundColor
        },
        onClick: function onClick() {
          return _this4.onDotClick(index);
        }
      });
    });
  };

  _proto.renderPagination = function renderPagination() {
    var _this$props = this.props,
        renderPagination = _this$props.renderPagination,
        paginationConfig = _this$props.paginationConfig;
    var customStyles = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.withScroll) ? {
      marginTop: 20
    } : {
      marginTop: 'unset'
    };

    if (renderPagination) {
      var customPagination = renderPagination({
        selectedDot: this.state.paginationIndex,
        onPrev: this.onPrevious,
        onNext: this.onNext,
        childrenCount: this.childrenCount,
        onDotClick: this.onDotClick
      });
      return React.cloneElement(customPagination, {
        ref: this.paginationRef,
        style: _extends({}, customPagination.props.style, {
          marginTop: 20
        })
      });
    }

    return React.createElement(Pagination, {
      style: customStyles,
      ref: this.paginationRef
    }, React.createElement(LeftArrow, {
      onClick: this.onPrevious
    }), this.renderDots(), React.createElement(RightArrow, {
      onClick: this.onNext
    }));
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        draggable = _this$props2.draggable,
        style = _this$props2.style,
        paginationConfig = _this$props2.paginationConfig;
    var cursor = draggable ? 'pointer' : 'unset';
    return React.createElement("div", {
      style: style
    }, React.createElement(SecondWrapper, {
      ref: this.overflowContainerRef,
      onScroll: this.onOverflowContentScroll,
      onMouseDown: draggable ? this.onOverflowContentMouseDown : noop,
      style: {
        cursor: cursor
      }
    }, this.renderChildren()), this.renderScrollbar(), (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.withScroll) && this.renderPagination());
  };

  _createClass(ReactSmartScrollerHorizontal, [{
    key: "shouldRenderScrollbar",
    get: function get() {
      var overflownRef = this.overflowContainerRef.current;
      var cols = this.props.numCols;

      if (!cols && overflownRef) {
        return overflownRef.clientWidth < overflownRef.scrollWidth;
      }

      return !(overflownRef && overflownRef.children.length <= cols);
    }
  }, {
    key: "trackPadding",
    get: function get() {
      var trackProps = this.props.trackProps;
      return trackProps ? getPaddingValues(trackProps.padding, trackProps.paddingLeft, trackProps.paddingRight, trackProps.paddingTop, trackProps.paddingBottom) : {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  }, {
    key: "contentMargin",
    get: function get() {
      var _this$state4 = this.state,
          thumbHeight = _this$state4.thumbHeight,
          trackHeight = _this$state4.trackHeight;
      var windowsScrollHeight = 20;
      var marginHeight = trackHeight > thumbHeight ? trackHeight : thumbHeight;
      var margin = isMacOs() ? marginHeight + windowsScrollHeight : marginHeight;
      return !isMobile() && this.shouldRenderScrollbar ? margin + 10 + "px" : '20px';
    }
  }, {
    key: "bottomOffset",
    get: function get() {
      return this.state.thumbHeight > this.state.trackHeight ? (this.state.thumbHeight - this.state.trackHeight) / 2 : 0;
    }
  }, {
    key: "startElement",
    get: function get() {
      if (this.props.startAt) {
        return document.getElementById(reactSmartScrollerId + "-" + this.props.startAt.startIndex);
      }

      return undefined;
    }
  }, {
    key: "childrenCount",
    get: function get() {
      return React.Children.count(this.props.children);
    }
  }, {
    key: "numberOfViews",
    get: function get() {
      var numCols = this.props.numCols || 1;
      return Math.ceil(this.childrenCount / numCols);
    }
  }, {
    key: "childrenWidth",
    get: function get() {
      var _this5 = this;

      return React.Children.map(this.props.children, function (_, index) {
        var _this5$overflowContai, _this5$overflowContai2;

        return {
          value: ((_this5$overflowContai = _this5.overflowContainerRef.current) === null || _this5$overflowContai === void 0 ? void 0 : (_this5$overflowContai2 = _this5$overflowContai.children.item(index)) === null || _this5$overflowContai2 === void 0 ? void 0 : _this5$overflowContai2.clientWidth) || 0,
          index: index
        };
      });
    }
  }]);

  return ReactSmartScrollerHorizontal;
}(React.Component);
ReactSmartScrollerHorizontal.defaultProps = {
  spacing: 0,
  vertical: false,
  draggable: false,
  pagination: false
};
var SecondWrapper = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject$1());
var ChildrenWrapper$1 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject2$1());
var Track$1 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject3$1(), colors.gray.mediumGray);
var RectangleThumb$1 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject4$1(), colors.primary);
var Pagination = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject5$1());
var LeftArrow = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject6(), colors.black);
var RightArrow = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject7(), colors.black);
var Dot = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject8());

function _templateObject7$1() {
  var data = _taggedTemplateLiteralLoose(["\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin: 0 3px;\n  cursor: pointer;\n"]);

  _templateObject7$1 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$1() {
  var data = _taggedTemplateLiteralLoose(["\n  border: solid ", ";\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  padding: 6px;\n  transform: rotate(-45deg);\n  -webkit-transform: rotate(-45deg);\n  cursor: pointer;\n"]);

  _templateObject6$1 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$2() {
  var data = _taggedTemplateLiteralLoose(["\n  border: solid ", ";\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  padding: 6px;\n  transform: rotate(135deg);\n  -webkit-transform: rotate(135deg);\n  cursor: pointer;\n"]);

  _templateObject5$2 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$2() {
  var data = _taggedTemplateLiteralLoose(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n"]);

  _templateObject4$2 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$2() {
  var data = _taggedTemplateLiteralLoose(["\n  flex: 0 0 auto;\n  box-sizing: border-box;\n"]);

  _templateObject3$2 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$2() {
  var data = _taggedTemplateLiteralLoose(["\n  display: flex;\n  position: relative;\n  -webkit-overflow-scrolling: touch;\n"]);

  _templateObject2$2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$2() {
  var data = _taggedTemplateLiteralLoose(["\n  display: flex;\n  flex-direction: column;\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var ReactSmartScrollerPagination = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ReactSmartScrollerPagination, _React$Component);

  function ReactSmartScrollerPagination(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      paginationIndex: 0,
      numberOfViews: 0,
      scrollValue: 0,
      children: _this.props.children,
      deltaX: 0,
      scrollLeft: 0,
      dragScroll: 0,
      deltaY: 0,
      horizontal: false,
      lockedMove: false
    };
    _this.overflowContainerRef = React.createRef();
    _this.onNext = _this.onNext.bind(_assertThisInitialized(_this));
    _this.onPrevious = _this.onPrevious.bind(_assertThisInitialized(_this));
    _this.onDotClick = _this.onDotClick.bind(_assertThisInitialized(_this));
    _this.onTouchMove = _this.onTouchMove.bind(_assertThisInitialized(_this));
    _this.onTouchStart = _this.onTouchStart.bind(_assertThisInitialized(_this));
    _this.updatePosition = _this.updatePosition.bind(_assertThisInitialized(_this));
    _this.setStartPosition = _this.setStartPosition.bind(_assertThisInitialized(_this));
    _this.onOverflowContentDrag = _this.onOverflowContentDrag.bind(_assertThisInitialized(_this));
    _this.onOverflowContentScroll = _this.onOverflowContentScroll.bind(_assertThisInitialized(_this));
    _this.onOverflowContentMouseDown = _this.onOverflowContentMouseDown.bind(_assertThisInitialized(_this));
    _this.deleteOverflowMouseMoveEvent = _this.deleteOverflowMouseMoveEvent.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = ReactSmartScrollerPagination.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.setState({
      numberOfViews: this.numberOfViews
    });
    window.addEventListener('resize', this.updatePosition);
    window.addEventListener('load', this.setStartPosition);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    var _this$overflowContain, _this$overflowContain2;

    window.removeEventListener('resize', this.updatePosition);
    window.removeEventListener('mousemove', this.onOverflowContentDrag);
    window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent);
    window.removeEventListener('load', this.setStartPosition);
    (_this$overflowContain = this.overflowContainerRef.current) === null || _this$overflowContain === void 0 ? void 0 : _this$overflowContain.removeEventListener('touchmove', this.onTouchMove);
    (_this$overflowContain2 = this.overflowContainerRef.current) === null || _this$overflowContain2 === void 0 ? void 0 : _this$overflowContain2.removeEventListener('touchend', this.deleteOverflowMouseMoveEvent);
  };

  _proto.setStartPosition = function setStartPosition() {
    var _this$props = this.props,
        startAt = _this$props.startAt,
        children = _this$props.children;
    var overflowRef = this.overflowContainerRef.current;
    var numCols = this.props.numCols || 1;
    var position = startAt ? startAt.startIndex : 0;

    if (overflowRef) {
      var page = Math.ceil(position / numCols);
      var childrenCount = React.Children.count(children);
      var maxChildrenPage = Math.ceil(childrenCount / numCols) - 1;
      var checkedPage = page < 0 ? 0 : page > maxChildrenPage ? maxChildrenPage : page;
      var scrollValue = -checkedPage * overflowRef.offsetWidth;
      overflowRef.style.transform = "translate(" + scrollValue + "px)";
      this.setState({
        paginationIndex: checkedPage,
        scrollValue: scrollValue
      });
    }
  };

  _proto.updatePosition = function updatePosition() {
    var children = this.props.children;
    var overflowRef = this.overflowContainerRef.current;
    var numCols = this.props.numCols || 1;
    var position = this.state.paginationIndex;

    if (overflowRef) {
      var page = Math.ceil(position / numCols);
      var childrenCount = React.Children.count(children);
      var maxChildrenPage = Math.ceil(childrenCount / numCols) - 1;
      var checkedPage = page < 0 ? 0 : page > maxChildrenPage ? maxChildrenPage : page;
      var scrollValue = -checkedPage * overflowRef.offsetWidth;
      overflowRef.style.transform = "translate(" + scrollValue + "px)";
      this.setState({
        paginationIndex: checkedPage,
        scrollValue: scrollValue
      });
    }
  };

  _proto.onNext = function onNext() {
    var overflowRef = this.overflowContainerRef.current;
    var _this$state = this.state,
        paginationIndex = _this$state.paginationIndex,
        scrollValue = _this$state.scrollValue;
    var paginationConfig = this.props.paginationConfig;

    if (overflowRef && paginationConfig && (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.withScroll) && paginationIndex < this.numberOfViews - 1) {
      var _overflowRef$children;

      var index = paginationIndex + 1;
      var newScrollValue = ((_overflowRef$children = overflowRef.children.item(paginationIndex)) === null || _overflowRef$children === void 0 ? void 0 : _overflowRef$children.clientWidth) || 0;
      overflowRef.scroll({
        left: overflowRef.scrollLeft + newScrollValue,
        top: 0,
        behavior: 'smooth'
      });
      return this.setState({
        paginationIndex: index
      });
    }

    if (overflowRef && paginationIndex === this.numberOfViews - 1 && paginationConfig && paginationConfig.infinite) {
      overflowRef.style.transform = "translate(0px)";
      return this.setState({
        paginationIndex: 0,
        scrollValue: 0
      });
    }

    if (overflowRef && paginationIndex < this.numberOfViews - 1) {
      var _this$props$paginatio, _this$props$paginatio2, _overflowRef$children2;

      var _index = paginationIndex + 1;

      var isLast = overflowRef.clientWidth + Math.abs(this.state.scrollValue) >= overflowRef.scrollWidth;

      if (isLast) {
        return;
      }

      var _newScrollValue = ((_this$props$paginatio = this.props.paginationConfig) === null || _this$props$paginatio === void 0 ? void 0 : _this$props$paginatio.withScroll) || ((_this$props$paginatio2 = this.props.paginationConfig) === null || _this$props$paginatio2 === void 0 ? void 0 : _this$props$paginatio2.renderNextToEachOther) ? scrollValue - (((_overflowRef$children2 = overflowRef.children.item(paginationIndex)) === null || _overflowRef$children2 === void 0 ? void 0 : _overflowRef$children2.clientWidth) || 0) : scrollValue - overflowRef.offsetWidth;

      overflowRef.style.transform = "translate(" + _newScrollValue + "px)";
      return this.setState({
        paginationIndex: _index,
        scrollValue: _newScrollValue
      });
    }
  };

  _proto.onPrevious = function onPrevious() {
    var overflowRef = this.overflowContainerRef.current;
    var _this$state2 = this.state,
        paginationIndex = _this$state2.paginationIndex,
        scrollValue = _this$state2.scrollValue;
    var paginationConfig = this.props.paginationConfig;

    if (overflowRef && paginationConfig && (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.withScroll) && paginationIndex > 0) {
      var _overflowRef$children3;

      var index = paginationIndex - 1;
      var newScrollValue = ((_overflowRef$children3 = overflowRef.children.item(index)) === null || _overflowRef$children3 === void 0 ? void 0 : _overflowRef$children3.clientWidth) || 0;
      overflowRef.scroll({
        left: overflowRef.scrollLeft - newScrollValue,
        top: 0,
        behavior: 'smooth'
      });
      return this.setState({
        paginationIndex: index
      });
    }

    if (overflowRef && paginationIndex === 0 && paginationConfig && paginationConfig.infinite) {
      var _this$props$paginatio3, _this$props$paginatio4, _overflowRef$children4;

      var _index2 = this.numberOfViews - 1;

      var _newScrollValue2 = ((_this$props$paginatio3 = this.props.paginationConfig) === null || _this$props$paginatio3 === void 0 ? void 0 : _this$props$paginatio3.withScroll) || ((_this$props$paginatio4 = this.props.paginationConfig) === null || _this$props$paginatio4 === void 0 ? void 0 : _this$props$paginatio4.renderNextToEachOther) ? _index2 + (((_overflowRef$children4 = overflowRef.children.item(_index2)) === null || _overflowRef$children4 === void 0 ? void 0 : _overflowRef$children4.clientWidth) || 0) : _index2 * overflowRef.offsetWidth;

      overflowRef.style.transform = "translate(-" + _newScrollValue2 + "px)";
      return this.setState({
        paginationIndex: _index2,
        scrollValue: -_newScrollValue2
      });
    }

    if (overflowRef && paginationIndex > 0) {
      var _this$props$paginatio5, _this$props$paginatio6, _overflowRef$children5;

      var _index3 = paginationIndex - 1;

      var _newScrollValue3 = ((_this$props$paginatio5 = this.props.paginationConfig) === null || _this$props$paginatio5 === void 0 ? void 0 : _this$props$paginatio5.withScroll) || ((_this$props$paginatio6 = this.props.paginationConfig) === null || _this$props$paginatio6 === void 0 ? void 0 : _this$props$paginatio6.renderNextToEachOther) ? scrollValue + (((_overflowRef$children5 = overflowRef.children.item(_index3)) === null || _overflowRef$children5 === void 0 ? void 0 : _overflowRef$children5.clientWidth) || 0) : scrollValue + overflowRef.offsetWidth;

      overflowRef.style.transform = "translate(" + _newScrollValue3 + "px)";
      return this.setState({
        paginationIndex: _index3,
        scrollValue: _newScrollValue3
      });
    }
  };

  _proto.onDotClick = function onDotClick(index) {
    var overflowRef = this.overflowContainerRef.current;
    var paginationIndex = this.state.paginationIndex;
    var paginationConfig = this.props.paginationConfig;

    if (overflowRef && paginationConfig && ((paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.withScroll) || (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.renderNextToEachOther))) {
      var _overflowRef$children6;

      var newScrollValue = (overflowRef === null || overflowRef === void 0 ? void 0 : (_overflowRef$children6 = overflowRef.children.item(index)) === null || _overflowRef$children6 === void 0 ? void 0 : _overflowRef$children6.offsetLeft) || 0;
      overflowRef.scroll({
        left: newScrollValue,
        top: 0,
        behavior: 'smooth'
      });
      return this.setState({
        paginationIndex: index
      });
    }

    if (overflowRef && index !== paginationIndex) {
      var _this$props$paginatio7, _this$props$paginatio8, _overflowRef$children7;

      var _newScrollValue4 = ((_this$props$paginatio7 = this.props.paginationConfig) === null || _this$props$paginatio7 === void 0 ? void 0 : _this$props$paginatio7.withScroll) || ((_this$props$paginatio8 = this.props.paginationConfig) === null || _this$props$paginatio8 === void 0 ? void 0 : _this$props$paginatio8.renderNextToEachOther) ? -((overflowRef === null || overflowRef === void 0 ? void 0 : (_overflowRef$children7 = overflowRef.children.item(index)) === null || _overflowRef$children7 === void 0 ? void 0 : _overflowRef$children7.offsetLeft) || 0) : -(index * overflowRef.clientWidth);

      overflowRef.style.transform = "translate(" + _newScrollValue4 + "px)";
      this.setState({
        paginationIndex: index,
        scrollValue: _newScrollValue4
      });
    }
  };

  _proto.onOverflowContentMouseDown = function onOverflowContentMouseDown(event) {
    event.preventDefault();
    var overflowRef = this.overflowContainerRef.current;
    var paginationConfig = this.props.paginationConfig;

    if (overflowRef && paginationConfig && paginationConfig.draggable) {
      overflowRef.style.transition = 'unset';
      overflowRef.style.transform = "translate(" + this.state.scrollValue + "px)";
      this.setState({
        deltaX: event.clientX,
        scrollLeft: this.state.scrollValue,
        dragScroll: this.state.scrollValue
      });
      window.addEventListener('mousemove', this.onOverflowContentDrag);
      window.addEventListener('mouseup', this.deleteOverflowMouseMoveEvent);
    }
  };

  _proto.onOverflowContentDrag = function onOverflowContentDrag(event) {
    var _this$state3 = this.state,
        deltaX = _this$state3.deltaX,
        scrollLeft = _this$state3.scrollLeft;
    var overflowRef = this.overflowContainerRef.current;
    var dragScroll = scrollLeft + (event.clientX - deltaX);

    if (overflowRef && event.clientX !== 0) {
      overflowRef.style.transform = "translate(" + dragScroll + "px)";
      this.setState({
        dragScroll: dragScroll
      });
    }
  };

  _proto.onTouchStart = function onTouchStart(event) {
    var _this$overflowContain3, _this$overflowContain4;

    var scrollValue = this.state.scrollValue;
    var touch = event.touches.item(0);
    var overflowRef = this.overflowContainerRef.current;
    this.setState({
      deltaX: touch.clientX,
      scrollLeft: scrollValue,
      dragScroll: scrollValue,
      deltaY: touch.clientY,
      horizontal: false,
      lockedMove: false
    });

    if (overflowRef) {
      overflowRef.style.transition = 'unset';
    }

    (_this$overflowContain3 = this.overflowContainerRef.current) === null || _this$overflowContain3 === void 0 ? void 0 : _this$overflowContain3.addEventListener('touchmove', this.onTouchMove, {
      passive: false
    });
    (_this$overflowContain4 = this.overflowContainerRef.current) === null || _this$overflowContain4 === void 0 ? void 0 : _this$overflowContain4.addEventListener('touchend', this.deleteOverflowMouseMoveEvent);
  };

  _proto.onTouchMove = function onTouchMove(event) {
    var _this$state4 = this.state,
        deltaX = _this$state4.deltaX,
        scrollLeft = _this$state4.scrollLeft,
        deltaY = _this$state4.deltaY,
        horizontal = _this$state4.horizontal,
        lockedMove = _this$state4.lockedMove;
    var touch = event.touches.item(0);
    var overflowRef = this.overflowContainerRef.current;
    var dragScroll = scrollLeft + (touch.clientX - deltaX);
    var paginationConfig = this.props.paginationConfig;
    var minOffset = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.minOffsetToChangeSlide) || 50;

    if (!horizontal && lockedMove) {
      return null;
    }

    if (Math.abs(touch.clientY - deltaY) > minOffset && !lockedMove) {
      this.setState({
        horizontal: false,
        lockedMove: true
      });
    }

    if (Math.abs(touch.clientX - deltaX) > minOffset && !lockedMove) {
      this.setState({
        horizontal: true,
        lockedMove: true
      });
    }

    if (Math.abs(touch.clientX - deltaX) > minOffset) {
      event.preventDefault();
    }

    if (overflowRef && touch.clientX !== 0) {
      overflowRef.style.transform = "translate(" + dragScroll + "px)";
      this.setState({
        dragScroll: dragScroll
      });
    }

    return;
  };

  _proto.deleteOverflowMouseMoveEvent = function deleteOverflowMouseMoveEvent() {
    var overflowRef = this.overflowContainerRef.current;
    var _this$state5 = this.state,
        dragScroll = _this$state5.dragScroll,
        paginationIndex = _this$state5.paginationIndex,
        scrollLeft = _this$state5.scrollLeft;
    var paginationConfig = this.props.paginationConfig;
    var minOffset = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.minOffsetToChangeSlide) || 150;
    var transition = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.transitionTime) || 1;

    if (overflowRef && -scrollLeft + dragScroll < -minOffset) {
      var numCols = this.props.numCols || 1;
      var isLastSlide = paginationIndex === Math.ceil(this.childrenCount / numCols) - 1;
      var newValue = isLastSlide ? paginationIndex * overflowRef.clientWidth : (paginationIndex + 1) * overflowRef.clientWidth;
      overflowRef.style.transition = "all " + transition + "s";
      overflowRef.style.transform = "translate(-" + newValue + "px)";
      this.setState({
        paginationIndex: isLastSlide ? paginationIndex : paginationIndex + 1,
        scrollValue: -newValue
      });
    }

    if (overflowRef && -scrollLeft + dragScroll > minOffset) {
      var isFirstSlide = paginationIndex === 0;

      var _newValue = isFirstSlide ? 0 : (paginationIndex - 1) * overflowRef.clientWidth;

      overflowRef.style.transition = "all " + transition + "s";
      overflowRef.style.transform = "translate(-" + _newValue + "px)";
      this.setState({
        paginationIndex: isFirstSlide ? paginationIndex : paginationIndex - 1,
        scrollValue: -_newValue
      });
    }

    var shouldReturn = all(overflowRef, -scrollLeft + dragScroll > -minOffset, -scrollLeft + dragScroll < minOffset);

    if (shouldReturn) {
      overflowRef.style.transition = "all " + transition + "s";
      overflowRef.style.transform = "translate(-" + paginationIndex * overflowRef.clientWidth + "px)";
    }

    window.removeEventListener('mousemove', this.onOverflowContentDrag);
    window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent);
  };

  _proto.renderChildren = function renderChildren() {
    var _this2 = this;

    var cols = this.props.numCols;
    var spacing = this.props.spacing;
    var padding = spacing / 2;
    var children = this.props.children;
    return React.Children.map(children, function (child, index) {
      var _this2$props$paginati, _this2$props$paginati2;

      var paddingRight = index !== React.Children.count(children) - 1 ? "paddingRight: " + padding + "px" : undefined;
      var paddingLeft = index !== 0 ? "paddingLeft: " + padding + "px" : undefined;
      var flexBasis = cols ? "calc(100% / " + cols + ")" : 'unset';
      var width = ((_this2$props$paginati = _this2.props.paginationConfig) === null || _this2$props$paginati === void 0 ? void 0 : _this2$props$paginati.withScroll) || ((_this2$props$paginati2 = _this2.props.paginationConfig) === null || _this2$props$paginati2 === void 0 ? void 0 : _this2$props$paginati2.renderNextToEachOther) ? 'unset' : '100%';
      return React.createElement(ChildrenWrapper$2, {
        id: reactSmartScrollerId + "-" + index,
        style: {
          padding: "0 " + padding + "px",
          flexBasis: flexBasis,
          paddingRight: paddingRight,
          paddingLeft: paddingLeft,
          width: width
        }
      }, child);
    });
  };

  _proto.renderDots = function renderDots() {
    var _this3 = this;

    var paginationConfig = this.props.paginationConfig;
    return Array.from(Array(this.numberOfViews)).map(function (_, index) {
      var backgroundColor = _this3.state.paginationIndex === index ? (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.activeDotColor) || colors.primary : (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.unactiveDotsColor) || colors.gray.mediumGray;
      return React.createElement(Dot$1, {
        key: index,
        style: {
          backgroundColor: backgroundColor
        },
        onClick: function onClick() {
          return _this3.onDotClick(index);
        }
      });
    });
  };

  _proto.renderPagination = function renderPagination() {
    var _this$props2 = this.props,
        renderPagination = _this$props2.renderPagination,
        paginationConfig = _this$props2.paginationConfig;
    var customStyles = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.withScroll) ? {
      marginTop: 20
    } : {
      marginTop: 'unset'
    };

    if (renderPagination) {
      return renderPagination({
        selectedDot: this.state.paginationIndex,
        onPrev: this.onPrevious,
        onNext: this.onNext,
        childrenCount: this.childrenCount,
        onDotClick: this.onDotClick
      });
    }

    return React.createElement(Pagination$1, {
      style: customStyles
    }, React.createElement(LeftArrow$1, {
      onClick: this.onPrevious
    }), this.renderDots(), React.createElement(RightArrow$1, {
      onClick: this.onNext
    }));
  };

  _proto.onOverflowContentScroll = function onOverflowContentScroll() {
    var _this$childrenWidth, _properChildrenOffset;

    var overflowRef = this.overflowContainerRef.current;
    var leftScroll = (overflowRef === null || overflowRef === void 0 ? void 0 : overflowRef.scrollLeft) || 0;
    var properChildrenOffsets = (_this$childrenWidth = this.childrenWidth) === null || _this$childrenWidth === void 0 ? void 0 : _this$childrenWidth.reduce(function (acc, element, index) {
      var _acc;

      return acc.concat({
        index: index + 1,
        value: element.value + (((_acc = acc[index - 1]) === null || _acc === void 0 ? void 0 : _acc.value) || 0)
      });
    }, []);
    var searchedElement = properChildrenOffsets === null || properChildrenOffsets === void 0 ? void 0 : (_properChildrenOffset = properChildrenOffsets.reverse()) === null || _properChildrenOffset === void 0 ? void 0 : _properChildrenOffset.find(function (item) {
      return leftScroll >= item.value;
    });
    this.setState({
      paginationIndex: searchedElement ? searchedElement.index : 0
    });
  };

  _proto.render = function render() {
    var _this$props3 = this.props,
        paginationConfig = _this$props3.paginationConfig,
        style = _this$props3.style;
    var transition = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.transitionTime) || 1;
    var customStyles = (paginationConfig === null || paginationConfig === void 0 ? void 0 : paginationConfig.withScroll) ? {
      overflowX: 'auto',
      marginBottom: -20
    } : {
      overflowX: 'unset',
      marginBottom: 'unset'
    };
    return React.createElement(ContainerWrapper, {
      style: style
    }, React.createElement(Container, {
      ref: this.overflowContainerRef,
      style: _extends({
        transition: "all " + transition + "s",
        flex: 1
      }, customStyles),
      onScroll: this.onOverflowContentScroll,
      onMouseDown: isMobile() ? noop : this.onOverflowContentMouseDown,
      onTouchStart: isMobile() ? this.onTouchStart : noop
    }, this.renderChildren()), this.renderPagination());
  };

  _createClass(ReactSmartScrollerPagination, [{
    key: "childrenCount",
    get: function get() {
      return React.Children.count(this.props.children);
    }
  }, {
    key: "numberOfViews",
    get: function get() {
      var numCols = this.props.numCols || 1;
      return Math.ceil(this.childrenCount / numCols);
    }
  }, {
    key: "childrenWidth",
    get: function get() {
      var _this4 = this;

      return React.Children.map(this.props.children, function (_, index) {
        var _this4$overflowContai, _this4$overflowContai2;

        return {
          value: ((_this4$overflowContai = _this4.overflowContainerRef.current) === null || _this4$overflowContai === void 0 ? void 0 : (_this4$overflowContai2 = _this4$overflowContai.children.item(index)) === null || _this4$overflowContai2 === void 0 ? void 0 : _this4$overflowContai2.clientWidth) || 0,
          index: index
        };
      });
    }
  }]);

  return ReactSmartScrollerPagination;
}(React.Component);
var ContainerWrapper = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject$2());
var Container = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject2$2());
var ChildrenWrapper$2 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject3$2());
var Pagination$1 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject4$2());
var LeftArrow$1 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject5$2(), colors.black);
var RightArrow$1 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject6$1(), colors.black);
var Dot$1 = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject7$1());

function _templateObject$3() {
  var data = _taggedTemplateLiteralLoose(["\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    position: relative;\n"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}
var ReactSmartScroller = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(ReactSmartScroller, _React$Component);

  function ReactSmartScroller() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = ReactSmartScroller.prototype;

  _proto.renderMain = function renderMain() {
    if (this.props.pagination) {
      return React.createElement(ReactSmartScrollerPagination, Object.assign({}, this.props));
    }

    return this.props.vertical ? React.createElement(ReactSmartScrollerVertical, Object.assign({}, this.props)) : React.createElement(ReactSmartScrollerHorizontal, Object.assign({}, this.props));
  };

  _proto.render = function render() {
    return !isServer() ? React.createElement(Wrapper, null, this.renderMain()) : null;
  };

  return ReactSmartScroller;
}(React.Component);
var Wrapper = /*#__PURE__*/styled.div( /*#__PURE__*/_templateObject$3());

exports.ReactSmartScroller = ReactSmartScroller;
//# sourceMappingURL=react-smart-scroller.cjs.development.js.map
