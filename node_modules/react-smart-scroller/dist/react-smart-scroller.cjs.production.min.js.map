{"version":3,"file":"react-smart-scroller.cjs.production.min.js","sources":["../src/lib/common/paddingCount.ts","../src/lib/utils/helpers.ts","../src/lib/utils/server.ts","../src/lib/utils/deviceDetect.ts","../src/components/ReactSmartScrollerVertical.tsx","../src/lib/styles/colors.ts","../src/components/ReactSmartScrollerHorizontal.tsx","../src/components/ReactSmartScrollerPagination.tsx","../src/components/ReactSmartScroller.tsx"],"sourcesContent":["export enum PaddingCount {\n    One = 1,\n    Two = 2,\n    Three = 3,\n    Four = 4\n}\n","import { KeyValuePair } from '../types'\nimport { PaddingCount } from '../common'\n\n// tslint:disable-next-line:no-any\nconst all = (...params: Array<any>) => params.every(Boolean)\nconst clearObject = (value: KeyValuePair) => Object\n    .keys(value)\n    .filter(key => Boolean(value[key]))\n    .reduce((acc, curr) => ({\n        ...acc,\n        [curr]: value[curr]\n    }), {})\nconst noop = () => {}\n\nexport {\n    clearObject,\n    all,\n    noop\n}\n\nexport const extractNumberFromStyle = (value?: string | number | null | undefined) => value\n    ? Number(value.toString().replace('px', ''))\n    : undefined\n\nexport const getPaddingValues = (\n    padding?: string | number,\n    paddingLeft?: string | number,\n    paddingRight?: string | number,\n    paddingTop?: string | number,\n    paddingBottom?: string | number\n) => {\n    const zeroPadding = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    }\n\n    if (!padding && !paddingLeft && !paddingRight && !paddingTop && !paddingBottom) {\n        return zeroPadding\n    }\n\n    if (!padding) {\n        return {\n            ...zeroPadding,\n            right: extractNumberFromStyle(paddingRight),\n            left: extractNumberFromStyle(paddingLeft),\n            top: extractNumberFromStyle(paddingTop),\n            bottom: extractNumberFromStyle(paddingBottom)\n        }\n    }\n\n    const splittedPadding = padding.toString().split(' ')\n    const paddingValuesCount = splittedPadding.length\n    const paddingValues = splittedPadding.map(extractNumberFromStyle)\n\n    switch (paddingValuesCount) {\n        case PaddingCount.One: {\n            const [ padding ] = paddingValues\n\n            return {\n                top: padding,\n                right: padding,\n                bottom: padding,\n                left: padding\n            }\n        }\n        case PaddingCount.Two: {\n            const [ paddingVertical, paddingHorizontal ] = paddingValues\n\n            return {\n                top: paddingVertical,\n                right: paddingHorizontal,\n                bottom: paddingVertical,\n                left: paddingHorizontal\n            }\n        }\n        case PaddingCount.Three: {\n            const [ paddingTop, paddingHorizontal, paddingBottom ] = paddingValues\n\n            return {\n                top: paddingTop,\n                right: paddingHorizontal,\n                bottom: paddingBottom,\n                left: paddingHorizontal\n            }\n        }\n        case PaddingCount.Four:\n        default: {\n            const [ top, right, bottom, left ] = paddingValues\n\n            return {\n                top,\n                right,\n                bottom,\n                left\n            }\n        }\n    }\n}\n","export const isServer = () => typeof window === 'undefined'\n","import { isServer } from './server'\n\nexport const checkAgent = (agentName: string) => !isServer()\n    ? navigator.userAgent.includes(agentName)\n    : false\n\nexport const isIpad = () => checkAgent('iPad')\nexport const isIOS = () => checkAgent('iPhone') || isIpad()\nexport const isAndroid = () => checkAgent('Android')\nexport const isMsEdge = () => checkAgent('Edge')\nexport const isMacOs = () => checkAgent('Mac')\nexport const isMobile = () => isAndroid() || isIOS()\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Padding, ReactSmartScrollerProps } from 'lib/types'\nimport { C, isMacOs, isMobile } from 'lib/utils'\nimport { colors } from 'lib/styles'\nimport { constants } from 'lib/common'\n\ntype ReactSmartSliderVerticalState = {\n    scrollContainerHeight: number,\n    deltaYOrigin: number,\n    deltaY: number,\n    thumbWidth: number,\n    trackWidth: number,\n    scrollHeight: number,\n    scrollTop: number,\n    padding: Padding,\n    ratio: number\n}\n\nexport class ReactSmartScrollerVertical extends React.Component<ReactSmartScrollerProps, ReactSmartSliderVerticalState> {\n    state: ReactSmartSliderVerticalState = {\n        scrollContainerHeight: 0,\n        deltaYOrigin: 0,\n        deltaY: 0,\n        thumbWidth: 0,\n        trackWidth: 0,\n        scrollHeight: 0,\n        scrollTop: 0,\n        padding: this.trackPadding,\n        ratio: 1\n    }\n\n    private overflowContainerRef: React.RefObject<HTMLDivElement> = React.createRef()\n    private thumbRef: React.RefObject<HTMLDivElement> = React.createRef()\n    private trackRef: React.RefObject<HTMLDivElement> = React.createRef()\n\n    constructor(props: ReactSmartScrollerProps) {\n        super(props)\n\n        this.measureContainers = this.measureContainers.bind(this)\n        this.onMouseDown = this.onMouseDown.bind(this)\n        this.onMouseDrag = this.onMouseDrag.bind(this)\n        this.onOverflowContentScroll = this.onOverflowContentScroll.bind(this)\n        this.deleteMouseMoveEvent = this.deleteMouseMoveEvent.bind(this)\n        this.onScrollbarClick = this.onScrollbarClick.bind(this)\n        this.onOverflowContentMouseDown = this.onOverflowContentMouseDown.bind(this)\n        this.onOverflowContentDrag = this.onOverflowContentDrag.bind(this)\n        this.deleteOverflowMouseMoveEvent = this.deleteOverflowMouseMoveEvent.bind(this)\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.measureContainers)\n        window.addEventListener('mouseup', this.deleteMouseMoveEvent)\n        window.addEventListener('transitionend', this.measureContainers)\n        window.addEventListener('mouseup', this.deleteOverflowMouseMoveEvent)\n        window.addEventListener('load', this.measureContainers)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.measureContainers)\n        window.removeEventListener('mouseup', this.deleteMouseMoveEvent)\n        window.removeEventListener('transitionend', this.measureContainers)\n        window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent)\n        window.removeEventListener('load', this.measureContainers)\n    }\n\n    get shouldRenderScrollbar() {\n        const overflownRef = this.overflowContainerRef.current\n        const cols = this.props.numCols as number\n\n        if (!cols && overflownRef) {\n            return overflownRef.clientHeight < overflownRef.scrollHeight\n        }\n\n        return !(overflownRef && overflownRef.children.length <= cols)\n    }\n\n    get trackPadding() {\n        const { trackProps } = this.props\n\n        return trackProps\n            ? C.getPaddingValues(\n                trackProps.padding,\n                trackProps.paddingLeft,\n                trackProps.paddingRight,\n                trackProps.paddingTop,\n                trackProps.paddingBottom\n            ) as Padding : {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0\n            }\n    }\n\n    get contentMargin() {\n        const { thumbWidth, trackWidth } = this.state\n        const windowsScrollWidth = 20\n        const marginWidth = trackWidth > thumbWidth ? trackWidth : thumbWidth\n        const margin = isMacOs() ? marginWidth + windowsScrollWidth : marginWidth\n\n        return !isMobile() && this.shouldRenderScrollbar\n            ? `${margin + 10}px`\n            : '20px'\n    }\n\n    get rightOffset() {\n        return this.state.thumbWidth > this.state.trackWidth\n            ? (this.state.thumbWidth - this.state.trackWidth) / 2\n            : 0\n    }\n\n    get startElement() {\n        if (this.props.startAt) {\n            return document.getElementById(`${constants.reactSmartScrollerId}-${this.props.startAt.startIndex}`)\n        }\n\n        return undefined\n    }\n\n    setStartPosition() {\n        const { startAt } = this.props\n        const overflowRef = this.overflowContainerRef.current as HTMLDivElement\n        const startElement = this.startElement\n\n        this.measureContainers()\n\n        if (overflowRef && startElement) {\n            const offset = startAt && startAt.center\n                ? (overflowRef.clientHeight - startElement.clientHeight) / 2\n                : 0\n\n            overflowRef.scrollTop = startElement.offsetTop - offset\n        }\n    }\n\n    scrollContainerReducedHeight(scrollContainerHeight: number) {\n        const { padding } = this.state\n\n        return scrollContainerHeight - (padding.top + padding.bottom)\n    }\n\n    measureContainers(event?: Event) {\n        const overflownRef = this.overflowContainerRef.current as HTMLDivElement\n        const thumbRef = this.thumbRef.current as HTMLDivElement\n        const trackRef = this.trackRef.current as HTMLDivElement\n        const areRefsCurrent = C.all(\n            overflownRef,\n            thumbRef,\n            trackRef\n        )\n\n        if (areRefsCurrent) {\n            const scrollContainerHeight = this.scrollContainerReducedHeight(overflownRef.clientHeight)\n            const maximumOffset = scrollContainerHeight - thumbRef.offsetHeight\n            const ratio = maximumOffset / (overflownRef.scrollHeight - overflownRef.clientHeight)\n\n            this.setState({\n                scrollContainerHeight,\n                thumbWidth: thumbRef.offsetWidth,\n                trackWidth: trackRef.clientWidth,\n                scrollHeight: overflownRef.scrollHeight,\n                ratio\n            }, () => {\n                if (event && event.type === 'load') {\n                    this.setStartPosition()\n                }\n            })\n        }\n\n        if (areRefsCurrent && thumbRef.offsetTop + thumbRef.offsetHeight > overflownRef.clientHeight) {\n            const scrollOffset = overflownRef.clientHeight - thumbRef.offsetHeight\n\n            overflownRef.scroll(0, overflownRef.scrollHeight)\n            thumbRef.style.top = `${scrollOffset}px`\n        }\n    }\n\n    onMouseDown(event: React.MouseEvent) {\n        event.preventDefault()\n\n        const thumbRef = this.thumbRef.current as HTMLDivElement\n        const overflownRef = this.overflowContainerRef.current as HTMLDivElement\n\n        if (thumbRef && overflownRef) {\n            this.setState({\n                deltaYOrigin: thumbRef.offsetTop,\n                deltaY: event.clientY + this.state.padding.top\n            })\n        }\n\n        window.addEventListener('mousemove', this.onMouseDrag)\n    }\n\n    onScrollbarClick({ clientY }: React.MouseEvent) {\n        const { padding } = this.state\n        const thumbRef = this.thumbRef.current as HTMLDivElement\n        const overflowRef = this.overflowContainerRef.current as HTMLDivElement\n        const shouldReturn = C.all(\n            thumbRef,\n            overflowRef,\n            clientY >= ((C.extractNumberFromStyle(thumbRef.style.top) || 0) + overflowRef.getBoundingClientRect().top + padding.top),\n            clientY <= ((C.extractNumberFromStyle(thumbRef.style.top) || 0) + overflowRef.getBoundingClientRect().top + thumbRef.offsetHeight + padding.top)\n        )\n\n        // leave this function if thumb was clicked\n        if (shouldReturn) {\n            return null\n        }\n\n        const maximumOffset = this.state.scrollContainerHeight - thumbRef.offsetHeight\n        // this is different ratio than in state\n        const ratio = (overflowRef.scrollHeight - overflowRef.clientHeight) / maximumOffset\n        const deltaY = overflowRef.getBoundingClientRect().top + (thumbRef.offsetHeight / 2) + padding.top\n\n        return overflowRef.scroll({\n            top: ratio * (clientY - deltaY),\n            left: 0,\n            behavior: 'smooth'\n        })\n    }\n\n    deleteMouseMoveEvent() {\n        window.removeEventListener('mousemove', this.onMouseDrag)\n    }\n\n    deleteOverflowMouseMoveEvent() {\n        window.removeEventListener('mousemove', this.onOverflowContentDrag)\n    }\n\n    onMouseDrag(event: DragEvent | MouseEvent) {\n        const zero = 0\n        const { deltaY, deltaYOrigin, scrollContainerHeight, padding } = this.state\n        const overflowRef = this.overflowContainerRef.current as HTMLDivElement\n        const thumbRef = this.thumbRef.current as HTMLDivElement\n        const maximumOffset = scrollContainerHeight - thumbRef.offsetHeight\n        const offset = event.clientY - deltaY + deltaYOrigin + padding.top\n        const isBetweenClientHeight = offset >= zero && offset <= maximumOffset\n        const areRefsCurrent = C.all(\n            Boolean(this.overflowContainerRef.current),\n            Boolean(this.thumbRef.current)\n        )\n\n        if (areRefsCurrent && !isBetweenClientHeight) {\n            const criticalDimension = offset < zero ? zero: maximumOffset\n            const criticalScrollerDimensions = offset > zero\n                ? overflowRef.scrollHeight - overflowRef.offsetHeight\n                : zero\n\n            thumbRef.style.top = `${criticalDimension}px`\n            overflowRef.scroll(zero, criticalScrollerDimensions)\n        }\n\n        if (areRefsCurrent && isBetweenClientHeight) {\n            // this is different ratio than in state\n            const ratio = (overflowRef.scrollHeight - overflowRef.offsetHeight) / maximumOffset\n\n            overflowRef.scroll(zero, ratio * offset)\n            thumbRef.style.top = `${offset}px`\n        }\n    }\n\n    onOverflowContentScroll() {\n        const { ratio } = this.state\n        const thumbRef = this.thumbRef.current  as HTMLDivElement\n        const overflowRef = this.overflowContainerRef.current\n\n        if (overflowRef && thumbRef) {\n            thumbRef.style.top = `${overflowRef.scrollTop * ratio}px`\n        }\n    }\n\n    onOverflowContentMouseDown(event: React.MouseEvent) {\n        event.preventDefault()\n\n        const overflowRef = this.overflowContainerRef.current\n\n        if (overflowRef) {\n            this.setState({\n                deltaY: event.clientY,\n                scrollTop: overflowRef.scrollTop\n            })\n        }\n\n        window.addEventListener('mousemove', this.onOverflowContentDrag)\n    }\n\n    onOverflowContentDrag(event: MouseEvent) {\n        const { deltaY, scrollTop } = this.state\n        const overflowRef = this.overflowContainerRef.current\n\n        if (overflowRef && event.clientY !== 0) {\n            overflowRef.scroll(0, scrollTop - (event.clientY - deltaY))\n        }\n    }\n\n    renderThumb() {\n        const { scrollContainerHeight, scrollHeight } = this.state\n        const percentageWidth = Number(((scrollContainerHeight * 100) / scrollHeight).toFixed(0))\n        const height = `${(percentageWidth * scrollContainerHeight) / 100}px`\n\n        if (this.props.thumb) {\n            return React.cloneElement(\n                this.props.thumb,\n                {\n                    ref: this.thumbRef,\n                    onMouseDown: this.onMouseDown,\n                    style: {\n                        top: 0,\n                        position: 'relative',\n                        cursor: 'pointer',\n                        ...this.props.thumb.props.style\n                    }\n                }\n            )\n        }\n\n        return (\n            <RectangleThumb\n                ref={this.thumbRef}\n                onMouseDown={this.onMouseDown}\n                style={{ height }}\n            />\n        )\n    }\n\n    renderScrollbar() {\n        const display = !isMobile() && this.shouldRenderScrollbar\n\n        return (\n            <Track\n                ref={this.trackRef}\n                onClick={this.onScrollbarClick}\n                style={{\n                    color: colors.gray.mediumGray,\n                    right: this.rightOffset,\n                    display: display ? 'flex' : 'none',\n                    ...this.props.trackProps\n                }}\n            >\n                <EmptyAbsolute>\n                    {this.renderThumb()}\n                </EmptyAbsolute>\n            </Track>\n        )\n    }\n\n    renderChildren() {\n        const cols = this.props.numCols as number\n        const spacing = this.props.spacing as number\n        const padding = spacing / 2\n        const children = this.props.children as ChildNode\n\n        return React.Children.map(children, (child: ChildNode, index: number) => {\n            const paddingBottom = index !== React.Children.count(children) - 1\n                ? `paddingBottom: ${padding}px`\n                : undefined\n            const paddingTop = index !== 0\n                ? `paddingTop: ${padding}px`\n                : undefined\n            const height = cols ? `calc(100% / ${cols})` : 'auto'\n            const extendedChild = React.cloneElement(\n                children[index],\n                {\n                    style: {\n                        display: 'flex',\n                        ...children[index].props.style\n                    }\n                }\n            )\n\n            return (\n                <ChildrenWrapper\n                    id={`${constants.reactSmartScrollerId}-${index}`}\n                    style={{\n                        padding: `${padding}px 0`,\n                        height,\n                        paddingTop,\n                        paddingBottom,\n                        marginRight: this.contentMargin\n                    }}\n                >\n                    {extendedChild}\n                </ChildrenWrapper>\n            )\n        })\n    }\n\n    render() {\n        const { draggable, style } = this.props\n        const cursor = draggable ? 'pointer' : 'unset'\n\n        return (\n            <div style={style}>\n                <Content\n                    style={{ cursor }}\n                    ref={this.overflowContainerRef}\n                    onScroll={this.onOverflowContentScroll}\n                    onMouseDown={draggable ? this.onOverflowContentMouseDown : C.noop}\n                >\n                    {this.renderChildren()}\n                </Content>\n                {this.renderScrollbar()}\n            </div>\n        )\n    }\n}\n\nexport const Content = styled.div`\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    margin-right: -20px;\n    -webkit-overflow-scrolling: touch;\n`\n\nexport const ChildrenWrapper = styled.div`\n    box-sizing: border-box;\n`\n\nexport const Track = styled.div`\n    position: absolute;\n    cursor: pointer;\n    right: 0;\n    height: 100%;\n    background-color: ${colors.gray.mediumGray};\n    top: 0;\n    width: 10px;\n    display: flex;\n    justify-content: center;\n`\n\nexport const RectangleThumb = styled.div`\n    position: relative;\n    background-color: ${colors.primary};\n    cursor: pointer;\n    width: 10px;\n    height: 100%;\n`\n\nexport const EmptyAbsolute = styled.div`\n    position: absolute;\n`\n","export const colors = {\n    primary: '#2ecc71',\n    secondary: '#27ae60',\n    typography: '#2c3e50',\n    red: '#e74c3c',\n    white: '#ffffff',\n    black: '#000000',\n    peterRiver: '#3498db',\n    sunflower: '#f1c40f',\n    gray: {\n        lightGray: '#ecf0f1',\n        mediumGray: '#bdc3c7',\n        darkGray: '#9ca2a7',\n    }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { colors } from 'lib/styles'\nimport { Padding, ReactSmartScrollerProps } from 'lib/types'\nimport { C, isMobile, isMacOs } from 'lib/utils'\nimport { constants } from 'lib/common'\n\ntype ReactSmartScrollerHorizontalState = {\n    scrollContainerWidth: number,\n    deltaXOrigin: number,\n    deltaX: number,\n    thumbHeight: number,\n    trackHeight: number,\n    scrollWidth: number,\n    scrollLeft: number,\n    padding: Padding,\n    ratio: number,\n    numberOfViews: number,\n    paginationIndex: number\n}\n\nexport class ReactSmartScrollerHorizontal extends React.Component<ReactSmartScrollerProps, ReactSmartScrollerHorizontalState> {\n    static defaultProps: Partial<ReactSmartScrollerProps> = {\n        spacing: 0,\n        vertical: false,\n        draggable: false,\n        pagination: false\n    }\n\n    state: ReactSmartScrollerHorizontalState = {\n        scrollContainerWidth: 0,\n        deltaXOrigin: 0,\n        deltaX: 0,\n        thumbHeight: 0,\n        trackHeight: 0,\n        scrollWidth: 0,\n        scrollLeft: 0,\n        padding: this.trackPadding,\n        ratio: 1,\n        numberOfViews: 0,\n        paginationIndex: 0\n    }\n\n    private overflowContainerRef: React.RefObject<HTMLDivElement> = React.createRef()\n    private thumbRef: React.RefObject<HTMLDivElement> = React.createRef()\n    private trackRef: React.RefObject<HTMLDivElement> = React.createRef()\n    private paginationRef: React.RefObject<HTMLDivElement> = React.createRef()\n\n    constructor(props: ReactSmartScrollerProps) {\n        super(props)\n\n        this.onNext = this.onNext.bind(this)\n        this.onPrevious = this.onPrevious.bind(this)\n        this.onDotClick = this.onDotClick.bind(this)\n        this.measureContainers = this.measureContainers.bind(this)\n        this.onMouseDown = this.onMouseDown.bind(this)\n        this.onMouseDrag = this.onMouseDrag.bind(this)\n        this.onOverflowContentScroll = this.onOverflowContentScroll.bind(this)\n        this.deleteMouseMoveEvent = this.deleteMouseMoveEvent.bind(this)\n        this.onScrollbarClick = this.onScrollbarClick.bind(this)\n        this.onOverflowContentDrag = this.onOverflowContentDrag.bind(this)\n        this.onOverflowContentMouseDown = this.onOverflowContentMouseDown.bind(this)\n        this.deleteOverflowMouseMoveEvent = this.deleteOverflowMouseMoveEvent.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({\n            numberOfViews: this.numberOfViews\n        })\n\n        window.addEventListener('resize', this.measureContainers)\n        window.addEventListener('mouseup', this.deleteMouseMoveEvent)\n        window.addEventListener('transitionend', this.measureContainers)\n        window.addEventListener('mouseup', this.deleteOverflowMouseMoveEvent)\n        window.addEventListener('load', this.measureContainers)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.measureContainers)\n        window.removeEventListener('mouseup', this.deleteMouseMoveEvent)\n        window.removeEventListener('transitionend', this.measureContainers)\n        window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent)\n        window.removeEventListener('load', this.measureContainers)\n    }\n\n    get shouldRenderScrollbar() {\n        const overflownRef = this.overflowContainerRef.current\n        const cols = this.props.numCols as number\n\n        if (!cols && overflownRef) {\n            return overflownRef.clientWidth < overflownRef.scrollWidth\n        }\n\n        return !(overflownRef && overflownRef.children.length <= cols)\n    }\n\n    get trackPadding() {\n        const { trackProps } = this.props\n\n        return trackProps\n            ? C.getPaddingValues(\n                trackProps.padding,\n                trackProps.paddingLeft,\n                trackProps.paddingRight,\n                trackProps.paddingTop,\n                trackProps.paddingBottom\n            ) as Padding : {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0\n            }\n    }\n\n    get contentMargin() {\n        const { thumbHeight, trackHeight } = this.state\n        const windowsScrollHeight = 20\n        const marginHeight = trackHeight > thumbHeight ? trackHeight : thumbHeight\n        const margin = isMacOs() ? marginHeight + windowsScrollHeight : marginHeight\n\n        return !isMobile() && this.shouldRenderScrollbar\n            ? `${margin + 10}px`\n            : '20px'\n    }\n\n    get bottomOffset() {\n        return this.state.thumbHeight > this.state.trackHeight\n            ? (this.state.thumbHeight - this.state.trackHeight) / 2\n            : 0\n    }\n\n    get startElement() {\n        if (this.props.startAt) {\n            return document.getElementById(`${constants.reactSmartScrollerId}-${this.props.startAt.startIndex}`)\n        }\n\n        return undefined\n    }\n\n    get childrenCount() {\n        return React.Children.count(this.props.children)\n    }\n\n    get numberOfViews() {\n        const numCols = this.props.numCols || 1\n\n        return Math.ceil(this.childrenCount / numCols)\n    }\n\n    get childrenWidth() {\n        return React.Children.map(this.props.children, (_, index) => {\n            return {\n                value: this.overflowContainerRef.current?.children.item(index)?.clientWidth || 0,\n                index: index\n            }\n        })\n    }\n\n    scrollContainerReducedWidth(scrollContainerWidth: number) {\n        const { padding } = this.state\n\n        return scrollContainerWidth - (padding.left + padding.right)\n    }\n\n    setStartPosition() {\n        const { startAt } = this.props\n        const overflowRef = this.overflowContainerRef.current as HTMLDivElement\n        const startElement = this.startElement\n\n        this.measureContainers()\n\n        if (overflowRef && startElement) {\n            const offset = startAt && startAt.center\n                ? (overflowRef.clientWidth - startElement.clientWidth) / 2\n                : 0\n\n            overflowRef.scrollLeft = startElement.offsetLeft - offset\n        }\n    }\n\n    measureContainers(event?: Event) {\n        const overflownRef = this.overflowContainerRef.current as HTMLDivElement\n        const thumbRef = this.thumbRef.current as HTMLDivElement\n        const trackRef = this.trackRef.current as HTMLDivElement\n        const areRefsCurrent = C.all(\n            overflownRef,\n            thumbRef,\n            trackRef\n        )\n\n        if (areRefsCurrent) {\n            const scrollContainerWidth = this.scrollContainerReducedWidth(overflownRef.clientWidth)\n            const maximumOffset = scrollContainerWidth - thumbRef.offsetWidth\n            const ratio = maximumOffset / (overflownRef.scrollWidth - overflownRef.clientWidth)\n\n            this.setState({\n                scrollContainerWidth,\n                thumbHeight: thumbRef.offsetHeight,\n                trackHeight: trackRef.clientHeight,\n                scrollWidth: overflownRef.scrollWidth,\n                ratio\n            }, () => {\n                if (event && event.type === 'load') {\n                    this.setStartPosition()\n                }\n            })\n        }\n\n        if (areRefsCurrent && thumbRef.offsetLeft + thumbRef.clientWidth > overflownRef.clientWidth) {\n            const scrollOffset = overflownRef.clientWidth - thumbRef.clientWidth\n\n            overflownRef.scroll(overflownRef.scrollWidth, 0)\n            thumbRef.style.left = `${scrollOffset}px`\n        }\n    }\n\n    onMouseDown(event: React.MouseEvent) {\n        event.preventDefault()\n\n        if (this.thumbRef.current) {\n            this.setState({\n                deltaXOrigin: this.thumbRef.current.offsetLeft,\n                deltaX: event.clientX + this.state.padding.left\n            })\n        }\n\n        window.addEventListener('mousemove', this.onMouseDrag)\n    }\n\n    onScrollbarClick({ clientX }: React.MouseEvent) {\n        const thumbRef = this.thumbRef.current as HTMLDivElement\n        const overflowRef = this.overflowContainerRef.current as HTMLDivElement\n        const shouldReturn = C.all(\n            thumbRef,\n            overflowRef,\n            clientX >= (thumbRef.offsetLeft + overflowRef.getBoundingClientRect().left),\n            clientX <= (thumbRef.offsetLeft + overflowRef.getBoundingClientRect().left + thumbRef.offsetWidth)\n        )\n\n        // leave this function if thumb was clicked\n        if (shouldReturn) {\n            return null\n        }\n\n        const maximumOffset = this.state.scrollContainerWidth - thumbRef.offsetWidth\n        // this is different ratio than in state\n        const ratio = (overflowRef.scrollWidth - overflowRef.clientWidth) / maximumOffset\n        const deltaX = overflowRef.getBoundingClientRect().left + (thumbRef.offsetWidth / 2) + this.state.padding.left\n\n        return overflowRef.scroll({\n            left: ratio * (clientX - deltaX),\n            top: 0,\n            behavior: 'smooth'\n        })\n    }\n\n    deleteMouseMoveEvent() {\n        window.removeEventListener('mousemove', this.onMouseDrag)\n    }\n\n    deleteOverflowMouseMoveEvent() {\n        window.removeEventListener('mousemove', this.onOverflowContentDrag)\n    }\n\n    onMouseDrag(event: DragEvent | MouseEvent) {\n        const zero = 0\n        const { deltaX, deltaXOrigin, scrollContainerWidth } = this.state\n        const overflowRef = this.overflowContainerRef.current as HTMLDivElement\n        const thumbRef = this.thumbRef.current as HTMLDivElement\n        const maximumOffset = scrollContainerWidth - thumbRef.offsetWidth\n        const offset = event.clientX - deltaX + deltaXOrigin\n        const isBetweenClientWidth = offset >= zero && offset <= maximumOffset\n        const areRefsCurrent = C.all(\n            Boolean(this.overflowContainerRef.current),\n            Boolean(this.thumbRef.current)\n        )\n\n        if (areRefsCurrent && !isBetweenClientWidth) {\n            const criticalDimension = offset < zero ? zero : maximumOffset\n            const criticalScrollerDimensions = offset > zero\n                ? overflowRef.scrollWidth - overflowRef.clientWidth\n                : zero\n\n            thumbRef.style.left = `${criticalDimension}px`\n            overflowRef.scroll(criticalScrollerDimensions, zero)\n        }\n\n        if (areRefsCurrent && isBetweenClientWidth) {\n            // this is different ratio than in state\n            const ratio = (overflowRef.scrollWidth - overflowRef.clientWidth) / maximumOffset\n\n            overflowRef.scroll(ratio * offset, zero)\n            thumbRef.style.left = `${offset}px`\n        }\n    }\n\n    onOverflowContentScroll() {\n        const { ratio } = this.state\n        const thumbRef = this.thumbRef.current  as HTMLDivElement\n        const overflowRef = this.overflowContainerRef.current\n\n        if (overflowRef && thumbRef) {\n            thumbRef.style.left = `${overflowRef.scrollLeft * ratio}px`\n        }\n\n        // logic to pagination\n        const leftScroll = overflowRef?.scrollLeft || 0\n        const properChildrenOffsets = this.childrenWidth?.reduce((acc, element, index) => {\n            return acc.concat({\n                index: index + 1,\n                value: element.value + (acc[index - 1]?.value || 0)\n            })\n        }, [] as Array<{ value: number, index: number }>)\n        const searchedElement = properChildrenOffsets?.reverse()?.find(item => leftScroll >= item.value)\n\n        this.setState({\n            paginationIndex: searchedElement\n                ? searchedElement.index\n                : 0\n        })\n    }\n\n    onOverflowContentMouseDown(event: React.MouseEvent) {\n        event.preventDefault()\n\n        const overflowRef = this.overflowContainerRef.current\n\n        if (overflowRef) {\n            this.setState({\n                deltaX: event.clientX,\n                scrollLeft: overflowRef.scrollLeft\n            })\n        }\n\n        window.addEventListener('mousemove', this.onOverflowContentDrag)\n    }\n\n    onOverflowContentDrag(event: MouseEvent | DragEvent) {\n        const { deltaX, scrollLeft } = this.state\n        const overflowRef = this.overflowContainerRef.current\n\n        if (overflowRef && event.clientX !== 0) {\n            overflowRef.scroll(scrollLeft - (event.clientX - deltaX), 0)\n        }\n    }\n\n    renderChildren() {\n        const cols = this.props.numCols as number\n        const spacing = this.props.spacing as number\n        const padding = spacing / 2\n        const children = this.props.children as ChildNode\n\n        return React.Children.map(children, (child: ChildNode, index: number) => {\n            const paddingRight = index !== React.Children.count(children) - 1\n                ? `paddingRight: ${padding}px`\n                : undefined\n            const paddingLeft = index !== 0\n                ? `paddingLeft: ${padding}px`\n                : undefined\n            const flexBasis = cols ? `calc(100% / ${cols})` : 'unset'\n\n            return (\n                <ChildrenWrapper\n                    id={`${constants.reactSmartScrollerId}-${index}`}\n                    style={{\n                        padding: `0 ${padding}px`,\n                        flexBasis,\n                        paddingRight,\n                        paddingLeft,\n                        marginBottom: this.contentMargin\n                    }}\n                >\n                    {child}\n                </ChildrenWrapper>\n            )\n        })\n    }\n\n    renderThumb() {\n        const { scrollContainerWidth, scrollWidth } = this.state\n        const percentageWidth = Number(((scrollContainerWidth * 100) / scrollWidth).toFixed(0))\n        const width = `${(percentageWidth * scrollContainerWidth) / 100}px`\n\n        if (this.props.thumb) {\n            return React.cloneElement(\n                this.props.thumb,\n                {\n                    ref: this.thumbRef,\n                    onMouseDown: this.onMouseDown,\n                    style: {\n                        left: 0,\n                        position: 'relative',\n                        cursor: 'pointer',\n                        ...this.props.thumb.props.style\n                    }\n                }\n            )\n        }\n\n        return (\n            <RectangleThumb\n                ref={this.thumbRef}\n                onMouseDown={this.onMouseDown}\n                style={{ width }}\n            />\n        )\n    }\n\n    renderScrollbar() {\n        const display = !isMobile() && this.shouldRenderScrollbar && !this.props.pagination\n        const customStyles = this.props.paginationConfig?.withScroll ? {\n            bottom: this.paginationRef.current?.clientHeight || 40\n        } as React.CSSProperties : {\n            bottom: 0\n        } as React.CSSProperties\n\n        return (\n            <Track\n                ref={this.trackRef}\n                onClick={this.onScrollbarClick}\n                style={{\n                    color: colors.gray.mediumGray,\n                    bottom: this.bottomOffset,\n                    display: display ? 'flex' : 'none',\n                    ...this.props.trackProps,\n                    ...customStyles\n                }}\n            >\n                {this.renderThumb()}\n            </Track>\n        )\n    }\n\n    onNext() {\n        const overflowRef = this.overflowContainerRef.current\n        const { paginationIndex } = this.state\n        const { paginationConfig } = this.props\n\n        if (overflowRef && paginationConfig && paginationConfig.withScroll && paginationIndex < this.numberOfViews - 1) {\n            const index = paginationIndex + 1\n            const newScrollValue = overflowRef.children.item(paginationIndex)?.clientWidth || 0\n\n            overflowRef.scroll({\n                left: overflowRef.scrollLeft + newScrollValue,\n                top: 0,\n                behavior: 'smooth'\n            })\n\n            return this.setState({\n                paginationIndex: index\n            })\n        }\n    }\n\n    onPrevious() {\n        const overflowRef = this.overflowContainerRef.current\n        const { paginationIndex } = this.state\n        const { paginationConfig } = this.props\n\n        if (overflowRef && paginationConfig && paginationConfig.withScroll && paginationIndex > 0) {\n            const index = paginationIndex - 1\n            const newScrollValue = overflowRef.children.item(index)?.clientWidth || 0\n\n            overflowRef.scroll({\n                left: overflowRef.scrollLeft - newScrollValue,\n                top: 0,\n                behavior: 'smooth'\n            })\n\n            return this.setState({\n                paginationIndex: index\n            })\n        }\n    }\n\n    onDotClick(index: number) {\n        const overflowRef = this.overflowContainerRef.current\n        const { paginationConfig } = this.props\n\n        if (overflowRef && paginationConfig && paginationConfig.withScroll) {\n            const newScrollValue = (overflowRef?.children.item(index) as HTMLDivElement)?.offsetLeft || 0\n\n            overflowRef.scroll({\n                left: newScrollValue,\n                top: 0,\n                behavior: 'smooth'\n            })\n\n            return this.setState({\n                paginationIndex: index\n            })\n        }\n    }\n\n    renderDots() {\n        const { paginationConfig } = this.props\n\n        return Array.from(Array(this.numberOfViews)).map((_, index) => {\n            const backgroundColor = this.state.paginationIndex === index\n                ? paginationConfig?.activeDotColor || colors.primary\n                : paginationConfig?.unactiveDotsColor || colors.gray.mediumGray\n\n            return (\n                <Dot\n                    key={index}\n                    style={{ backgroundColor }}\n                    onClick={() => this.onDotClick(index)}\n                />\n            )\n        })\n    }\n\n    renderPagination() {\n        const { renderPagination, paginationConfig } = this.props\n        const customStyles = paginationConfig?.withScroll ? {\n            marginTop: 20\n        } as React.CSSProperties : {\n            marginTop: 'unset'\n        } as React.CSSProperties\n\n        if (renderPagination) {\n            const customPagination = renderPagination({\n                selectedDot: this.state.paginationIndex,\n                onPrev: this.onPrevious,\n                onNext: this.onNext,\n                childrenCount: this.childrenCount,\n                onDotClick: this.onDotClick\n            })\n\n            return React.cloneElement(customPagination, {\n                ref: this.paginationRef,\n                style: {\n                    ...customPagination.props.style,\n                    marginTop: 20\n                }\n            })\n        }\n\n        return (\n            <Pagination\n                style={customStyles}\n                ref={this.paginationRef}\n            >\n                <LeftArrow onClick={this.onPrevious}/>\n                {this.renderDots()}\n                <RightArrow onClick={this.onNext}/>\n            </Pagination>\n        )\n    }\n\n    render() {\n        const { draggable, style, paginationConfig } = this.props\n        const cursor = draggable ? 'pointer' : 'unset'\n\n        return (\n            <div style={style}>\n                <SecondWrapper\n                    ref={this.overflowContainerRef}\n                    onScroll={this.onOverflowContentScroll}\n                    onMouseDown={draggable ? this.onOverflowContentMouseDown : C.noop}\n                    style={{ cursor }}\n                >\n                    {this.renderChildren()}\n                </SecondWrapper>\n                {this.renderScrollbar()}\n                {paginationConfig?.withScroll && this.renderPagination()}\n            </div>\n        )\n    }\n}\n\nexport const SecondWrapper = styled.div`\n    display: flex;\n    overflow-x: scroll;\n    overflow-y: hidden;\n    margin-bottom: -20px;\n    -webkit-overflow-scrolling: touch;\n`\n\nexport const ChildrenWrapper = styled.div`\n    flex: 0 0 auto;\n    box-sizing: border-box;\n`\n\nexport const Track = styled.div`\n    position: absolute;\n    cursor: pointer;\n    left: 0;\n    width: 100%;\n    background-color: ${colors.gray.mediumGray};\n    bottom: 0;\n    height: 10px;\n    display: flex;\n    align-items: center;\n`\n\nexport const RectangleThumb = styled.div`\n    position: relative;\n    left: 0;\n    background-color: ${colors.primary};\n    cursor: pointer;\n    width: 100px;\n    height: 10px;\n`\n\nexport const Pagination = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n`\n\nexport const LeftArrow = styled.div`\n    border: solid ${colors.black};\n    border-width: 0 2px 2px 0;\n    display: inline-block;\n    padding: 6px;\n    transform: rotate(135deg);\n    -webkit-transform: rotate(135deg);\n    cursor: pointer;\n`\n\nexport const RightArrow = styled.div`\n    border: solid ${colors.black};\n    border-width: 0 2px 2px 0;\n    display: inline-block;\n    padding: 6px;\n    transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    cursor: pointer;\n`\n\nexport const Dot = styled.div`\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    margin: 0 3px;\n    cursor: pointer;\n`\n\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ReactSmartScrollerProps } from 'lib/types'\nimport { colors } from 'lib/styles'\nimport { C, isMobile } from 'lib/utils'\nimport { constants } from 'lib/common'\n\ntype ReactSmartScrollerPaginationState = {\n    numberOfViews: number,\n    paginationIndex: number,\n    scrollValue: number,\n    children: React.ReactNode,\n    deltaX: number,\n    deltaY: number,\n    scrollLeft: number,\n    dragScroll: number,\n    lockedMove: boolean,\n    horizontal: boolean\n}\n\nexport class ReactSmartScrollerPagination extends React.Component<ReactSmartScrollerProps, ReactSmartScrollerPaginationState> {\n    state: ReactSmartScrollerPaginationState = {\n        paginationIndex: 0,\n        numberOfViews: 0,\n        scrollValue: 0,\n        children: this.props.children,\n        deltaX: 0,\n        scrollLeft: 0,\n        dragScroll: 0,\n        deltaY: 0,\n        horizontal: false,\n        lockedMove: false\n    }\n\n    private overflowContainerRef: React.RefObject<HTMLDivElement> = React.createRef()\n\n    constructor(props: ReactSmartScrollerProps) {\n        super(props)\n\n        this.onNext = this.onNext.bind(this)\n        this.onPrevious = this.onPrevious.bind(this)\n        this.onDotClick = this.onDotClick.bind(this)\n        this.onTouchMove = this.onTouchMove.bind(this)\n        this.onTouchStart = this.onTouchStart.bind(this)\n        this.updatePosition = this.updatePosition.bind(this)\n        this.setStartPosition = this.setStartPosition.bind(this)\n        this.onOverflowContentDrag = this.onOverflowContentDrag.bind(this)\n        this.onOverflowContentScroll = this.onOverflowContentScroll.bind(this)\n        this.onOverflowContentMouseDown = this.onOverflowContentMouseDown.bind(this)\n        this.deleteOverflowMouseMoveEvent = this.deleteOverflowMouseMoveEvent.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({\n            numberOfViews: this.numberOfViews\n        })\n\n        window.addEventListener('resize', this.updatePosition)\n        window.addEventListener('load', this.setStartPosition)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updatePosition)\n        window.removeEventListener('mousemove', this.onOverflowContentDrag)\n        window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent)\n        window.removeEventListener('load', this.setStartPosition)\n        this.overflowContainerRef.current?.removeEventListener('touchmove', this.onTouchMove)\n        this.overflowContainerRef.current?.removeEventListener('touchend', this.deleteOverflowMouseMoveEvent)\n    }\n\n    get childrenCount() {\n        return React.Children.count(this.props.children)\n    }\n\n    get numberOfViews() {\n        const numCols = this.props.numCols || 1\n\n        return Math.ceil(this.childrenCount / numCols)\n    }\n\n    get childrenWidth() {\n        return React.Children.map(this.props.children, (_, index) => {\n            return {\n                value: this.overflowContainerRef.current?.children.item(index)?.clientWidth || 0,\n                index: index\n            }\n        })\n    }\n\n    setStartPosition() {\n        const { startAt, children } = this.props\n        const overflowRef = this.overflowContainerRef.current\n        const numCols = this.props.numCols || 1\n        const position = startAt\n            ? startAt.startIndex\n            : 0\n\n        if (overflowRef) {\n            const page = Math.ceil(position / numCols)\n            const childrenCount = React.Children.count(children)\n            const maxChildrenPage = Math.ceil(childrenCount / numCols) - 1\n            const checkedPage = page < 0\n                ? 0\n                : page > maxChildrenPage\n                    ? maxChildrenPage\n                    : page\n            const scrollValue = -checkedPage * overflowRef.offsetWidth\n\n            overflowRef.style.transform = `translate(${scrollValue}px)`\n\n            this.setState({\n                paginationIndex: checkedPage,\n                scrollValue\n            })\n        }\n    }\n\n    updatePosition() {\n        const { children } = this.props\n        const overflowRef = this.overflowContainerRef.current\n        const numCols = this.props.numCols || 1\n        const position = this.state.paginationIndex\n\n        if (overflowRef) {\n            const page = Math.ceil(position / numCols)\n            const childrenCount = React.Children.count(children)\n            const maxChildrenPage = Math.ceil(childrenCount / numCols) - 1\n            const checkedPage = page < 0\n                ? 0\n                : page > maxChildrenPage\n                    ? maxChildrenPage\n                    : page\n            const scrollValue = -checkedPage * overflowRef.offsetWidth\n\n            overflowRef.style.transform = `translate(${scrollValue}px)`\n\n            this.setState({\n                paginationIndex: checkedPage,\n                scrollValue\n            })\n        }\n    }\n\n    onNext() {\n        const overflowRef = this.overflowContainerRef.current\n        const { paginationIndex, scrollValue } = this.state\n        const { paginationConfig } = this.props\n\n        if (overflowRef && paginationConfig && paginationConfig?.withScroll && paginationIndex < this.numberOfViews - 1) {\n            const index = paginationIndex + 1\n            const newScrollValue = overflowRef.children.item(paginationIndex)?.clientWidth || 0\n\n            overflowRef.scroll({\n                left: overflowRef.scrollLeft + newScrollValue,\n                top: 0,\n                behavior: 'smooth'\n            })\n\n            return this.setState({\n                paginationIndex: index\n            })\n        }\n\n        if (overflowRef && paginationIndex === this.numberOfViews - 1 && paginationConfig && paginationConfig.infinite) {\n            overflowRef.style.transform = `translate(0px)`\n\n            return this.setState({\n                paginationIndex: 0,\n                scrollValue: 0\n            })\n        }\n\n        if (overflowRef && paginationIndex < this.numberOfViews - 1) {\n            const index = paginationIndex + 1\n            const isLast = overflowRef.clientWidth + Math.abs(this.state.scrollValue) >= overflowRef.scrollWidth\n\n            if (isLast) {\n                return\n            }\n\n            const newScrollValue = this.props.paginationConfig?.withScroll || this.props.paginationConfig?.renderNextToEachOther\n                ? scrollValue - (overflowRef.children.item(paginationIndex)?.clientWidth || 0)\n                : scrollValue - overflowRef.offsetWidth\n\n            overflowRef.style.transform = `translate(${newScrollValue}px)`\n\n            return this.setState({\n                paginationIndex: index,\n                scrollValue: newScrollValue\n            })\n        }\n    }\n\n    onPrevious() {\n        const overflowRef = this.overflowContainerRef.current\n        const { paginationIndex, scrollValue } = this.state\n        const { paginationConfig } = this.props\n\n        if (overflowRef && paginationConfig && paginationConfig?.withScroll && paginationIndex > 0) {\n            const index = paginationIndex - 1\n            const newScrollValue = overflowRef.children.item(index)?.clientWidth || 0\n\n            overflowRef.scroll({\n                left: overflowRef.scrollLeft - newScrollValue,\n                top: 0,\n                behavior: 'smooth'\n            })\n\n            return this.setState({\n                paginationIndex: index\n            })\n        }\n\n        if (overflowRef && paginationIndex === 0 && paginationConfig && paginationConfig.infinite) {\n            const index = this.numberOfViews - 1\n            const newScrollValue = this.props.paginationConfig?.withScroll || this.props.paginationConfig?.renderNextToEachOther\n                ? index + (overflowRef.children.item(index)?.clientWidth || 0)\n                : index * overflowRef.offsetWidth\n\n            overflowRef.style.transform = `translate(-${newScrollValue}px)`\n\n            return this.setState({\n                paginationIndex: index,\n                scrollValue: -newScrollValue\n            })\n        }\n\n        if (overflowRef && paginationIndex > 0) {\n            const index = paginationIndex - 1\n            const newScrollValue = this.props.paginationConfig?.withScroll || this.props.paginationConfig?.renderNextToEachOther\n                ? scrollValue + (overflowRef.children.item(index)?.clientWidth || 0)\n                : scrollValue + overflowRef.offsetWidth\n\n            overflowRef.style.transform = `translate(${newScrollValue}px)`\n\n            return this.setState({\n                paginationIndex: index,\n                scrollValue: newScrollValue\n            })\n        }\n    }\n\n    onDotClick(index: number) {\n        const overflowRef = this.overflowContainerRef.current\n        const { paginationIndex } = this.state\n        const { paginationConfig } = this.props\n\n        if (overflowRef && paginationConfig && (paginationConfig?.withScroll || paginationConfig?.renderNextToEachOther)) {\n            const newScrollValue = (overflowRef?.children.item(index) as HTMLDivElement)?.offsetLeft || 0\n\n            overflowRef.scroll({\n                left: newScrollValue,\n                top: 0,\n                behavior: 'smooth'\n            })\n\n            return this.setState({\n                paginationIndex: index\n            })\n        }\n\n        if (overflowRef && index !== paginationIndex) {\n            const newScrollValue = this.props.paginationConfig?.withScroll || this.props.paginationConfig?.renderNextToEachOther\n                ? -((overflowRef?.children.item(index) as HTMLDivElement)?.offsetLeft || 0)\n                : -(index * overflowRef.clientWidth)\n\n            overflowRef.style.transform = `translate(${newScrollValue}px)`\n\n            this.setState({\n                paginationIndex: index,\n                scrollValue: newScrollValue\n            })\n        }\n    }\n\n    onOverflowContentMouseDown(event: React.MouseEvent) {\n        event.preventDefault()\n\n        const overflowRef = this.overflowContainerRef.current\n        const { paginationConfig }  = this.props\n\n        if (overflowRef && paginationConfig && paginationConfig.draggable) {\n            overflowRef.style.transition = 'unset'\n            overflowRef.style.transform = `translate(${this.state.scrollValue}px)`\n\n            this.setState({\n                deltaX: event.clientX,\n                scrollLeft: this.state.scrollValue,\n                dragScroll: this.state.scrollValue\n            })\n\n            window.addEventListener('mousemove', this.onOverflowContentDrag)\n            window.addEventListener('mouseup', this.deleteOverflowMouseMoveEvent)\n        }\n    }\n\n    onOverflowContentDrag(event: MouseEvent) {\n        const { deltaX, scrollLeft } = this.state\n        const overflowRef = this.overflowContainerRef.current\n        const dragScroll = scrollLeft + (event.clientX - deltaX)\n\n        if (overflowRef && event.clientX !== 0) {\n            overflowRef.style.transform = `translate(${dragScroll}px)`\n\n            this.setState({\n                dragScroll\n            })\n        }\n    }\n\n    onTouchStart(event: React.TouchEvent) {\n        const { scrollValue } = this.state\n        const touch = event.touches.item(0) as Touch\n        const overflowRef = this.overflowContainerRef.current\n\n        this.setState({\n            deltaX: touch.clientX,\n            scrollLeft: scrollValue,\n            dragScroll: scrollValue,\n            deltaY: touch.clientY,\n            horizontal: false,\n            lockedMove: false\n        })\n\n        if (overflowRef) {\n            overflowRef.style.transition = 'unset'\n        }\n\n        this.overflowContainerRef.current?.addEventListener('touchmove', this.onTouchMove, { passive: false })\n        this.overflowContainerRef.current?.addEventListener('touchend', this.deleteOverflowMouseMoveEvent)\n    }\n\n    onTouchMove(event: TouchEvent) {\n        const { deltaX, scrollLeft, deltaY, horizontal, lockedMove } = this.state\n        const touch = event.touches.item(0) as Touch\n        const overflowRef = this.overflowContainerRef.current\n        const dragScroll = scrollLeft + (touch.clientX - deltaX)\n        const { paginationConfig } = this.props\n        const minOffset = paginationConfig?.minOffsetToChangeSlide || 50\n\n        if (!horizontal && lockedMove) {\n            return null\n        }\n\n        if (Math.abs(touch.clientY - deltaY) > minOffset && !lockedMove) {\n            this.setState({\n                horizontal: false,\n                lockedMove: true\n            })\n        }\n\n        if (Math.abs(touch.clientX - deltaX) > minOffset && !lockedMove) {\n            this.setState({\n                horizontal: true,\n                lockedMove: true\n            })\n        }\n\n        if (Math.abs(touch.clientX - deltaX) > minOffset) {\n            event.preventDefault()\n        }\n\n        if (overflowRef && touch.clientX !== 0) {\n            overflowRef.style.transform = `translate(${dragScroll}px)`\n\n            this.setState({\n                dragScroll\n            })\n        }\n\n        return\n    }\n\n    deleteOverflowMouseMoveEvent() {\n        const overflowRef = this.overflowContainerRef.current\n        const { dragScroll, paginationIndex, scrollLeft } = this.state\n        const { paginationConfig } = this.props\n        const minOffset = paginationConfig?.minOffsetToChangeSlide || 150\n        const transition = paginationConfig?.transitionTime || 1\n\n        if (overflowRef && (-scrollLeft + dragScroll < -minOffset)) {\n            const numCols = this.props.numCols || 1\n            const isLastSlide = paginationIndex === Math.ceil(this.childrenCount / numCols) - 1\n            const newValue = isLastSlide\n                ? paginationIndex * overflowRef.clientWidth\n                : (paginationIndex + 1) * overflowRef.clientWidth\n\n            overflowRef.style.transition = `all ${transition}s`\n            overflowRef.style.transform = `translate(-${newValue}px)`\n\n            this.setState({\n                paginationIndex: isLastSlide ? paginationIndex : paginationIndex + 1,\n                scrollValue: -newValue\n            })\n        }\n\n        if (overflowRef && (-scrollLeft + dragScroll > minOffset)) {\n            const isFirstSlide = paginationIndex === 0\n            const newValue = isFirstSlide\n                ? 0\n                : (paginationIndex - 1) * overflowRef.clientWidth\n\n            overflowRef.style.transition = `all ${transition}s`\n            overflowRef.style.transform = `translate(-${newValue}px)`\n\n            this.setState({\n                paginationIndex: isFirstSlide ? paginationIndex : paginationIndex - 1,\n                scrollValue: -newValue\n            })\n        }\n\n        const shouldReturn = C.all(\n            overflowRef,\n            -scrollLeft + dragScroll > -minOffset,\n            -scrollLeft + dragScroll < minOffset\n        )\n\n        if (shouldReturn) {\n            overflowRef!.style.transition = `all ${transition}s`\n            overflowRef!.style.transform = `translate(-${paginationIndex * overflowRef!.clientWidth}px)`\n        }\n\n        window.removeEventListener('mousemove', this.onOverflowContentDrag)\n        window.removeEventListener('mouseup', this.deleteOverflowMouseMoveEvent)\n    }\n\n    renderChildren() {\n        const cols = this.props.numCols as number\n        const spacing = this.props.spacing as number\n        const padding = spacing / 2\n        const children = this.props.children as ChildNode\n\n        return React.Children.map(children, (child: ChildNode, index: number) => {\n            const paddingRight = index !== React.Children.count(children) - 1\n                ? `paddingRight: ${padding}px`\n                : undefined\n            const paddingLeft = index !== 0\n                ? `paddingLeft: ${padding}px`\n                : undefined\n            const flexBasis = cols ? `calc(100% / ${cols})` : 'unset'\n            const width = (this.props.paginationConfig?.withScroll || this.props.paginationConfig?.renderNextToEachOther) ? 'unset' : '100%'\n\n            return (\n                <ChildrenWrapper\n                    id={`${constants.reactSmartScrollerId}-${index}`}\n                    style={{\n                        padding: `0 ${padding}px`,\n                        flexBasis,\n                        paddingRight,\n                        paddingLeft,\n                        width\n                    }}\n                >\n                    {child}\n                </ChildrenWrapper>\n            )\n        })\n    }\n\n    renderDots() {\n        const { paginationConfig } = this.props\n\n        return Array.from(Array(this.numberOfViews)).map((_, index) => {\n            const backgroundColor = this.state.paginationIndex === index\n                ? paginationConfig?.activeDotColor || colors.primary\n                : paginationConfig?.unactiveDotsColor || colors.gray.mediumGray\n\n            return (\n                <Dot\n                    key={index}\n                    style={{ backgroundColor }}\n                    onClick={() => this.onDotClick(index)}\n                />\n            )\n        })\n    }\n\n    renderPagination() {\n        const { renderPagination, paginationConfig } = this.props\n        const customStyles = paginationConfig?.withScroll ? {\n            marginTop: 20\n        } as React.CSSProperties : {\n            marginTop: 'unset'\n        } as React.CSSProperties\n\n        if (renderPagination) {\n            return renderPagination({\n                selectedDot: this.state.paginationIndex,\n                onPrev: this.onPrevious,\n                onNext: this.onNext,\n                childrenCount: this.childrenCount,\n                onDotClick: this.onDotClick\n            })\n        }\n\n        return (\n            <Pagination style={customStyles}>\n                <LeftArrow onClick={this.onPrevious}/>\n                {this.renderDots()}\n                <RightArrow onClick={this.onNext}/>\n            </Pagination>\n        )\n    }\n\n    onOverflowContentScroll() {\n        const overflowRef = this.overflowContainerRef.current\n        const leftScroll = overflowRef?.scrollLeft || 0\n        const properChildrenOffsets = this.childrenWidth?.reduce((acc, element, index) => {\n            return acc.concat({\n                index: index + 1,\n                value: element.value + (acc[index - 1]?.value || 0)\n            })\n        }, [] as Array<{ value: number, index: number }>)\n        const searchedElement = properChildrenOffsets?.reverse()?.find(item => leftScroll >= item.value)\n\n        this.setState({\n            paginationIndex: searchedElement\n                ? searchedElement.index\n                : 0\n        })\n    }\n\n    render() {\n        const { paginationConfig, style } = this.props\n        const transition = paginationConfig?.transitionTime || 1\n        const customStyles = paginationConfig?.withScroll ? {\n            overflowX: 'auto',\n            marginBottom: -20\n        } as React.CSSProperties : {\n            overflowX: 'unset',\n            marginBottom: 'unset'\n        } as React.CSSProperties\n\n        return (\n            <ContainerWrapper style={style}>\n                <Container\n                    ref={this.overflowContainerRef}\n                    style={{\n                        transition: `all ${transition}s`,\n                        flex: 1,\n                        ...customStyles\n                    }}\n                    onScroll={this.onOverflowContentScroll}\n                    onMouseDown={isMobile() ? C.noop : this.onOverflowContentMouseDown}\n                    onTouchStart={isMobile() ? this.onTouchStart : C.noop}\n                >\n                    {this.renderChildren()}\n                </Container>\n                {this.renderPagination()}\n            </ContainerWrapper>\n        )\n    }\n}\n\nexport const ContainerWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const Container = styled.div`\n  display: flex;\n  position: relative;\n  -webkit-overflow-scrolling: touch;\n`\n\nexport const ChildrenWrapper = styled.div`\n  flex: 0 0 auto;\n  box-sizing: border-box;\n`\n\nexport const Pagination = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 40px;\n`\n\nexport const LeftArrow = styled.div`\n  border: solid ${colors.black};\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  padding: 6px;\n  transform: rotate(135deg);\n  -webkit-transform: rotate(135deg);\n  cursor: pointer;\n`\n\nexport const RightArrow = styled.div`\n  border: solid ${colors.black};\n  border-width: 0 2px 2px 0;\n  display: inline-block;\n  padding: 6px;\n  transform: rotate(-45deg);\n  -webkit-transform: rotate(-45deg);\n  cursor: pointer;\n`\n\nexport const Dot = styled.div`\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  margin: 0 3px;\n  cursor: pointer;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ReactSmartScrollerProps } from 'lib/types'\nimport { isServer } from 'lib/utils'\nimport { ReactSmartScrollerVertical } from './ReactSmartScrollerVertical'\nimport { ReactSmartScrollerHorizontal } from './ReactSmartScrollerHorizontal'\nimport { ReactSmartScrollerPagination } from './ReactSmartScrollerPagination'\n\nexport class ReactSmartScroller extends React.Component<ReactSmartScrollerProps> {\n    renderMain() {\n        if (this.props.pagination) {\n            return (\n                <ReactSmartScrollerPagination {...this.props}/>\n            )\n        }\n\n        return this.props.vertical ? (\n            <ReactSmartScrollerVertical {...this.props}/>\n        ) : (\n            <ReactSmartScrollerHorizontal {...this.props}/>\n        )\n    }\n\n    render() {\n        return !isServer() ? (\n            <Wrapper>\n                {this.renderMain()}\n            </Wrapper>\n        ) : null\n    }\n}\n\nexport const Wrapper = styled.div`\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    position: relative;\n`\n"],"names":["PaddingCount","all","params","every","Boolean","noop","extractNumberFromStyle","value","Number","toString","replace","undefined","getPaddingValues","padding","paddingLeft","paddingRight","paddingTop","paddingBottom","zeroPadding","top","right","bottom","left","splittedPadding","split","paddingValuesCount","length","paddingValues","map","One","Two","paddingVertical","paddingHorizontal","Three","Four","isServer","window","checkAgent","agentName","navigator","userAgent","includes","isMacOs","isMobile","ReactSmartScrollerVertical","props","scrollContainerHeight","deltaYOrigin","deltaY","thumbWidth","trackWidth","scrollHeight","scrollTop","_this","trackPadding","ratio","React","createRef","measureContainers","bind","onMouseDown","onMouseDrag","onOverflowContentScroll","deleteMouseMoveEvent","onScrollbarClick","onOverflowContentMouseDown","onOverflowContentDrag","deleteOverflowMouseMoveEvent","componentDidMount","addEventListener","this","componentWillUnmount","removeEventListener","setStartPosition","startAt","overflowRef","overflowContainerRef","current","startElement","offsetTop","center","clientHeight","scrollContainerReducedHeight","state","event","overflownRef","thumbRef","trackRef","areRefsCurrent","C","setState","offsetWidth","clientWidth","offsetHeight","type","_this2","scrollOffset","scroll","style","preventDefault","clientY","getBoundingClientRect","behavior","maximumOffset","offset","isBetweenClientHeight","criticalScrollerDimensions","renderThumb","height","toFixed","thumb","cloneElement","ref","position","cursor","RectangleThumb","renderScrollbar","display","shouldRenderScrollbar","Track","onClick","color","rightOffset","trackProps","EmptyAbsolute","renderChildren","cols","numCols","spacing","children","Children","child","index","count","extendedChild","ChildrenWrapper","id","constants","marginRight","_this3","contentMargin","render","draggable","Content","onScroll","marginWidth","margin","document","getElementById","startIndex","Component","styled","div","ReactSmartScrollerHorizontal","scrollContainerWidth","deltaXOrigin","deltaX","thumbHeight","trackHeight","scrollWidth","scrollLeft","numberOfViews","paginationIndex","onNext","onPrevious","onDotClick","scrollContainerReducedWidth","offsetLeft","clientX","isBetweenClientWidth","leftScroll","properChildrenOffsets","childrenWidth","_this$childrenWidth","reduce","acc","element","concat","searchedElement","reverse","_properChildrenOffset","find","item","flexBasis","marginBottom","width","pagination","customStyles","paginationConfig","withScroll","paginationRef","bottomOffset","newScrollValue","renderDots","Array","from","_","Dot","key","backgroundColor","_this4","activeDotColor","unactiveDotsColor","renderPagination","marginTop","customPagination","selectedDot","onPrev","childrenCount","Pagination","LeftArrow","RightArrow","SecondWrapper","marginHeight","Math","ceil","_this5","vertical","ReactSmartScrollerPagination","scrollValue","dragScroll","horizontal","lockedMove","onTouchMove","onTouchStart","updatePosition","page","maxChildrenPage","checkedPage","transform","infinite","abs","_this$props$paginatio2","renderNextToEachOther","_this$props$paginatio4","_this$props$paginatio6","_this$props$paginatio8","transition","touch","touches","passive","minOffset","minOffsetToChangeSlide","transitionTime","isLastSlide","newValue","isFirstSlide","_this2$props$paginati2","ContainerWrapper","Container","flex","overflowX","ReactSmartScroller","renderMain","Wrapper"],"mappings":"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"}